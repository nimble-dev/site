[
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributions",
    "section": "",
    "text": "We welcome contributions to help improve NIMBLE.\nThese may include:\n\nNew algorithms to the nimble repository.\nUsage examples to the demos repository.\nImprovements or updates to our documentation in the docs repository.\nTutorial or workshop materials to the outreach repository.\n\n\nHow to Contribute\nContributions to NIMBLE can be made by forking the NIMBLE repository and submitting a pull request with your changes.\nIf you have questions about this workflow, or would like to request membership to the NIMBLE Github organization, please contact the development team."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NIMBLE",
    "section": "",
    "text": "Other packages that use the BUGS language are only for Markov chain Monte Carlo (MCMC). With NIMBLE, you can turn BUGS code into model objects and use them for whatever algorithm you want. That includes algorithms provided with NIMBLE and algorithms you write using nimbleFunctions. NIMBLE extends BUGS by allowing multiple parameterizations for distributions, user-written functions and distributions, and more."
  },
  {
    "objectID": "index.html#write-statistical-models-in-the-bugs-language-from-r",
    "href": "index.html#write-statistical-models-in-the-bugs-language-from-r",
    "title": "NIMBLE",
    "section": "",
    "text": "Other packages that use the BUGS language are only for Markov chain Monte Carlo (MCMC). With NIMBLE, you can turn BUGS code into model objects and use them for whatever algorithm you want. That includes algorithms provided with NIMBLE and algorithms you write using nimbleFunctions. NIMBLE extends BUGS by allowing multiple parameterizations for distributions, user-written functions and distributions, and more."
  },
  {
    "objectID": "index.html#use-and-customize-nimbles-statistical-algorithms",
    "href": "index.html#use-and-customize-nimbles-statistical-algorithms",
    "title": "NIMBLE",
    "section": "Use and customize NIMBLE’s statistical algorithms",
    "text": "Use and customize NIMBLE’s statistical algorithms\n\nNIMBLE provides MCMC, sequential Monte Carlo (particle filters), and more.\nNIMBLE algorithms are written so they can adapt to different statistical models. For MCMC, NIMBLE can assign a default set of sampler choices, but you can customize the samplers from R. For example, you can choose what parameters to sample in a block, and you can easily write your own samplers and include them."
  },
  {
    "objectID": "index.html#compile-your-models-and-algorithms-for-fast-execution.",
    "href": "index.html#compile-your-models-and-algorithms-for-fast-execution.",
    "title": "NIMBLE",
    "section": "Compile your models and algorithms for fast execution.",
    "text": "Compile your models and algorithms for fast execution.\n\nNIMBLE generates C++ code customized to your model and algorithms, compiles it, and lets you use it from R.\nYou don’t need to know anything about C++ to use NIMBLE’s compiler. NIMBLE provides R functions to call the compiled algorithms, and you get the output back in R. (You do need to have a C++ compiler and related tools installed. See installation instructions.)"
  },
  {
    "objectID": "index.html#write-your-own-algorithms-in-nimble",
    "href": "index.html#write-your-own-algorithms-in-nimble",
    "title": "NIMBLE",
    "section": "Write your own algorithms in NIMBLE",
    "text": "Write your own algorithms in NIMBLE\n\nWriting new statistical methods using nimbleFunctions in R is similar to writing R functions.\nIf you have a method you’d like to implement, you can program it using nimbleFunctions. The syntax is very similar to R, but you’ll need to learn some details to get started. The nimbleFunction system allows programmers to control how a particular algorithm should adapt to each model and/or variables it is applied to. The NIMBLE compiler can make nimbleFunctions run very efficiently."
  },
  {
    "objectID": "index.html#compile-numerical-work-in-r-via-c-without-coding-any-c.",
    "href": "index.html#compile-numerical-work-in-r-via-c-without-coding-any-c.",
    "title": "NIMBLE",
    "section": "Compile numerical work in R via C++ without coding any C++.",
    "text": "Compile numerical work in R via C++ without coding any C++.\n\nDon’t care about models written in the BUGS language? Just want to try making your R code to go faster?\nnimbleFunctions don’t need to use BUGS models, so you can use them to speed up many kinds of numerical computations for any other purpose. The NIMBLE compiler can handle math, including linear algebra and distributions. It also supports basic iteration, flow control, and data structures."
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "New as of version 0.9.1:\n\nThe NIMBLE cheatsheet — a compact two-page overview and reference guide."
  },
  {
    "objectID": "documentation.html#cheatsheet",
    "href": "documentation.html#cheatsheet",
    "title": "Documentation",
    "section": "",
    "text": "New as of version 0.9.1:\n\nThe NIMBLE cheatsheet — a compact two-page overview and reference guide."
  },
  {
    "objectID": "documentation.html#user-manual",
    "href": "documentation.html#user-manual",
    "title": "Documentation",
    "section": "User Manual",
    "text": "User Manual\n\nAn HTML version of the manual.\nA PDF version of the manual.\n\nThe manual provides information for those wishing to use NIMBLE to work with their own models as well as algorithm developers wishing to write algorithms using NIMBLE. Old versions of the manual can be found here."
  },
  {
    "objectID": "documentation.html#training-materials",
    "href": "documentation.html#training-materials",
    "title": "Documentation",
    "section": "Training materials",
    "text": "Training materials\nPlease see our collection of Github repositories with training materials for materials from our various NIMBLE training workshops, including workshops developed for statisticans and workshops developed for ecologists."
  },
  {
    "objectID": "documentation.html#other-links",
    "href": "documentation.html#other-links",
    "title": "Documentation",
    "section": "Other links",
    "text": "Other links\n\nExamples of spatial and spatio-temporal models (specifically for disease mapping) provided by Andrew Lawson.\nBlog post on converting from JAGS or BUGS to NIMBLE.\nFirst and second blog posts on support for Bayesian non-parametric distributions.\nBlog post on reversible jump sampling for variable selection.\nUsing NIMBLE for the examples in the book Applied Hierarchical Modeling in Ecology.."
  },
  {
    "objectID": "documentation.html#some-papers-about-nimble",
    "href": "documentation.html#some-papers-about-nimble",
    "title": "Documentation",
    "section": "Some papers about NIMBLE",
    "text": "Some papers about NIMBLE\n\nMotivation and design of NIMBLE:\nde Valpine, P., D. Turek, C.J. Paciorek, C. Anderson-Bergman, D. Temple Lang, and R. Bodik. 2017. Programming with models: writing statistical algorithms for general model structures with NIMBLE. Journal of Computational and Graphical Statistics 26:403-413. https://doi.org/10.1080/10618600.2016.1172487.\n\n\nNIMBLE for Hidden Markov Models:\nTurek, D., P. de Valpine, and C.J. Paciorek. 2016. Efficient Markov chain Monte Carlo sampling for hierarchical hidden Markov models. Environmental and Ecological Statistics 23:549–564. https://doi.org/10.1007/s10651-016-0353-z\n\n\nNIMBLE for Ecological Models:\nPonisio, L.C., P. de Valpine, N. Michaud, and D. Turek. 2020. One size does not fit all: Customizing MCMC methods for hierarchical models using NIMBLE. Ecology & Evolution 10: 2385– 2416. https://doi.org/10.1002/ece3.6053\n\n\nSequential Monte Carlo (particle filtering) methods in NIMBLE:\nMichaud, N., P. de Valpine, D. Turek, C.J. Paciorek, and D. Nguyen. 2021. Sequential Monte Carlo Methods in the nimble and nimbleSMC R Packages. Journal of Statistical Software 100(3): 1-39. https://doi.org/10.18637/jss.v100.i03\n\n\nSpatial Epidemiology in NIMBLE:\nLawson, A.B. 2020. NIMBLE for Bayesian Disease Mapping. Spatial and Spatio-temporal Epidemiology 33. https://doi.org/10.1016/j.sste.2020.100323\n\n\nNIMBLE for item response theory models:\nPaganin, S., C.J. Paciorek, C. Wehrhahn, A. Rodríguez, S. Rabe-Hesketh, and P. de Valpine. 2021. Computational methods for Bayesian semiparametric Item Response Theory models. https://arxiv.org/abs/2101.11583.\n\n\nWAIC in NIMBLE\nHug, J.E., and C.J. Paciorek. 2021. A numerically stable online implementation and exploration of WAIC through variations of the predictive density, using NIMBLE. https://arxiv.org/abs/2106.13359."
  },
  {
    "objectID": "documentation.html#packages-with-extensions-and-applications-of-nimble",
    "href": "documentation.html#packages-with-extensions-and-applications-of-nimble",
    "title": "Documentation",
    "section": "Packages with extensions and applications of NIMBLE",
    "text": "Packages with extensions and applications of NIMBLE\nA partial list of packages that extend or use nimble.\n\nnimbleSMC: all of NIMBLE’s sequential Monte Carlo (aka particle filtering) algorithms; migrated out of the core NIMBLE package as of version 0.10.0.\nnimbleEcology: distributions commonly used in ecology for use in nimble models\nnimbleSCR: utility functions, distributions, and methods for improving Markov chain Monte Carlo (MCMC) sampling efficiency for ecological spatial capture-recapture (SCR) models.\nbayesNSGP: Bayesian analysis of (non-stationary) Gaussian processes, using nimble as the computational engine.\nbcgam: Bayesian constrained generalized linear models\nbridgesampling: functions for estimating marginal likelihoods, Bayes factors, posterior model probabilities, and normalizing constants in general, via different versions of bridge sampling.\nnimbleDistance: user-defined distributions that can be used to implement distance sampling models in nimble.\nnimbleCarbon: utility functions and bespoke probability distributions for the Bayesian analyses of radiocarbon dates."
  },
  {
    "objectID": "groups-and-issues.html",
    "href": "groups-and-issues.html",
    "title": "Groups and Issues",
    "section": "",
    "text": "We will post (occasional) announcements on the nimble-announce Google groups site.\nWe have an email list on the nimble-users Google groups site. This is intended for questions about NIMBLE, requests for new features, and other discussion of NIMBLE."
  },
  {
    "objectID": "groups-and-issues.html#groups",
    "href": "groups-and-issues.html#groups",
    "title": "Groups and Issues",
    "section": "",
    "text": "We will post (occasional) announcements on the nimble-announce Google groups site.\nWe have an email list on the nimble-users Google groups site. This is intended for questions about NIMBLE, requests for new features, and other discussion of NIMBLE."
  },
  {
    "objectID": "groups-and-issues.html#issues",
    "href": "groups-and-issues.html#issues",
    "title": "Groups and Issues",
    "section": "Issues",
    "text": "Issues\nIssues and bugs can be reported via the issue tracker of the nimble repository or via the nimble-users Google groups site. General “how to” questions are welcome. If reporting a problem, please provide a reproducible example. For compilation errors, please provide your operating system."
  },
  {
    "objectID": "download.html",
    "href": "download.html",
    "title": "Download",
    "section": "",
    "text": "Before installing NIMBLE, you need a compiler and related tools such as make that R can use. You’ll need these anyway to use NIMBLE.\nOn Windows you can get these by installing Rtools.exe from here. Important: with R version 4.0 or newer, for which you need Rtools40, be sure to follow the instructions in the section “Putting Rtools on the PATH” to set the PATH after the installation is complete. For older versions of R, for which you would use Rtools35.exe, be sure to check the box that will modify your PATH during the installation process.\nOn Mac OS X you can get these by installing the XCode command line tools. (The full XCode development environment is fine but not required.)\nMore details and troubleshooting tips are provided in Section 4 of the User Manual.\nIf you install a new version of R, you will need to reinstall NIMBLE."
  },
  {
    "objectID": "download.html#prerequisites",
    "href": "download.html#prerequisites",
    "title": "Download",
    "section": "",
    "text": "Before installing NIMBLE, you need a compiler and related tools such as make that R can use. You’ll need these anyway to use NIMBLE.\nOn Windows you can get these by installing Rtools.exe from here. Important: with R version 4.0 or newer, for which you need Rtools40, be sure to follow the instructions in the section “Putting Rtools on the PATH” to set the PATH after the installation is complete. For older versions of R, for which you would use Rtools35.exe, be sure to check the box that will modify your PATH during the installation process.\nOn Mac OS X you can get these by installing the XCode command line tools. (The full XCode development environment is fine but not required.)\nMore details and troubleshooting tips are provided in Section 4 of the User Manual.\nIf you install a new version of R, you will need to reinstall NIMBLE."
  },
  {
    "objectID": "download.html#current-version-1.3.0",
    "href": "download.html#current-version-1.3.0",
    "title": "Download",
    "section": "Current version (1.3.0)",
    "text": "Current version (1.3.0)\n\nInstalling from CRAN\nNIMBLE is available from CRAN as a source package and as a binary package for Windows and Mac OS. Please note that even if you install from CRAN, you still need to have a compiler and related tools installed as discussed above and in Section 4 of our User Manual.\ninstall.packages(\"nimble\")\n\n\nInstalling from R-nimble.org\nIf you prefer, you can install the package directly from our repository as follows.\nIf you install in this manner, please first install the igraph, R6, coda, numDeriv, and pracma R packages as these are dependencies and will not be automatically installed when installing from source.\nOnly the installation from source works when installing from our repository. Invoke the following at the R command line:\n# Install from source for MacOS, Linux, or Windows:\ninstall.packages(\"nimble\", repos = \"https://r-nimble.org\", type = \"source\")\n# the 'type = \"source\"' is unnecessary for Linux\nOr download the source package for installation via R CMD INSTALL on Linux, Mac, or Windows\nThe NIMBLE source code can be viewed by unzipping the source package tarball or directly on our GitHub repository."
  },
  {
    "objectID": "download.html#installing-from-github",
    "href": "download.html#installing-from-github",
    "title": "Download",
    "section": "Installing from GitHub",
    "text": "Installing from GitHub\nYou can install either the current release or the latest development version from GitHub.\n# For the current release:\nremotes::install_github(\"nimble-dev/nimble\", ref = \"master\", subdir = \"packages/nimble\")\n\n# For the development release:\nremotes::install_github(\"nimble-dev/nimble\", ref = \"devel\", subdir = \"packages/nimble\")"
  },
  {
    "objectID": "download.html#older-versions",
    "href": "download.html#older-versions",
    "title": "Download",
    "section": "Older versions",
    "text": "Older versions\nPrevious releases of NIMBLE can be found here.\nFor a summary of changes in each version, please see the News page or the NEWS file in the package."
  },
  {
    "objectID": "download.html#beta-testing-of-automatic-differentiation-features",
    "href": "download.html#beta-testing-of-automatic-differentiation-features",
    "title": "Download",
    "section": "Beta testing of automatic differentiation features",
    "text": "Beta testing of automatic differentiation features\nAutomatic differentiation, including support for Hamiltonian Monte Carlo and Laplace (and AGHQ) approximation is part of NIMBLE as of the version 1.0.0 release. Instructions for using it are in our User Manual."
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html",
    "href": "archived-versions-of-nimble-and-the-user-manual.html",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "",
    "text": "This page provides access to previous versions of NIMBLE and their corresponding documentation."
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#current-version",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#current-version",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "Current Version",
    "text": "Current Version\n\nNIMBLE 1.3.0 - Download | User Manual"
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#previous-versions",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#previous-versions",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "Previous Versions",
    "text": "Previous Versions\n\nVersion 1.2.x Series\n\nNIMBLE 1.2.1 - Source Package\nNIMBLE 1.2.0 - Source Package\n\n\n\nVersion 1.1.x Series\n\nNIMBLE 1.1.0 - Source Package\n\n\n\nVersion 1.0.x Series\n\nNIMBLE 1.0.1 - Source Package\nNIMBLE 1.0.0 - Source Package\n\n\n\nVersion 0.13.x Series\n\nNIMBLE 0.13.1 - Source Package\nNIMBLE 0.13.0 - Source Package\n\n\n\nVersion 0.12.x Series\n\nNIMBLE 0.12.2 - Source Package\nNIMBLE 0.12.1 - Source Package\n\n\n\nOlder Versions\nFor versions prior to 0.12.x, please check our GitHub releases page or contact the development team."
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#installation-instructions",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#installation-instructions",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "Installation Instructions",
    "text": "Installation Instructions\nTo install an archived version:\n# Download the source package and install\ninstall.packages(\"path/to/nimble_X.Y.Z.tar.gz\", repos = NULL, type = \"source\")\n\n# Or install directly from URL\ninstall.packages(\"https://r-nimble.org/src/contrib/Archive/nimble/nimble_X.Y.Z.tar.gz\", \n                 repos = NULL, type = \"source\")"
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#user-manual-archives",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#user-manual-archives",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "User Manual Archives",
    "text": "User Manual Archives\n\nCurrent User Manual: HTML | PDF\nPrevious versions of the manual are included with each package release"
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#release-notes",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#release-notes",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "Release Notes",
    "text": "Release Notes\nFor detailed information about changes in each version, see our Release Notes page or the NEWS file included with each package."
  },
  {
    "objectID": "archived-versions-of-nimble-and-the-user-manual.html#support-for-older-versions",
    "href": "archived-versions-of-nimble-and-the-user-manual.html#support-for-older-versions",
    "title": "Archived Versions of NIMBLE and the User Manual",
    "section": "Support for Older Versions",
    "text": "Support for Older Versions\nWhile we encourage users to upgrade to the latest version, we understand that some projects may require older versions. Limited support is available through our community forum for older versions."
  },
  {
    "objectID": "blog/announcing-the-nimblemacros-package-and-the-use-of-macros-in-nimble-models.html",
    "href": "blog/announcing-the-nimblemacros-package-and-the-use-of-macros-in-nimble-models.html",
    "title": "announcing the nimbleMacros package and the use of macros in NIMBLE models",
    "section": "",
    "text": "Recent versions of NIMBLE now include the ability to use macros in models. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC, Laplace approximation, and SMC).\nA NIMBLE macro is a succinct syntax that expands to create the NIMBLE model code for part or all of a model.\nWe recently released the first version of the nimbleMacros package on CRAN, which provides an initial set of macros available to users and developers. As an example, one could set up the code for a linear mixed effects model by using the LM (“linear model”) macro like this:\nlibrary(nimbleMacros)\n\ncode &lt;- nimbleCode({\n  LM(weight[1:N] ~ Time + (1|Chick))\n})\nwith the formula syntax mimicking that of the lme4 package. After building the model based on the code object, you can see the model code produced after the macro is expanded with model$getCode(). The nimbleMacros package also includes macros for creating linear predictors and for loops, and we plan to add additional macros in the future.\nDevelopers can use the tools in nimble itself to create their own macros. See Section 12.4 of the NIMBLE user manual, the nimbleMacros vignette, or help(buildMacro) for more information.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "announcing the nimbleMacros package and the use of macros in NIMBLE models"
    ]
  },
  {
    "objectID": "blog/bug-in-newly-released-version-0-13-0-affecting-mcmc-for-models-with-predictive-nodes.html",
    "href": "blog/bug-in-newly-released-version-0-13-0-affecting-mcmc-for-models-with-predictive-nodes.html",
    "title": "Bug in newly-released version 0.13.0 affecting MCMC for models with predictive nodes",
    "section": "",
    "text": "We recently released version 0.13.0, which has some improvements in how we handle predictive nodes in NIMBLE’s MCMC engine.\nUnfortunately, we realized (thanks to a user post from a couple days ago) that there is a bug in this new approach to predictive nodes.\nIf you haven’t upgraded to version 0.13.0, simply wait to upgrade until we release a bug fix in 0.13.1 in the next couple weeks.\nIf you have upgraded to version 0.13.0 and if you have run an MCMC on a model that both (1) has predictive nodes and (2) has multivariate nodes, then the bug might affect your results. Please set:\n  nimbleOptions(MCMCusePredictiveDependenciesInCalculations = TRUE)\nand then reconfigure/rebuild and rerun your MCMC. The option above will ensure that the MCMC behaves as it would in previous versions of NIMBLE.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/nimble-is-hiring-a-programmer-2.html",
    "href": "blog/nimble-is-hiring-a-programmer-2.html",
    "title": "NIMBLE is hiring a programmer",
    "section": "",
    "text": "The NIMBLE development team is hiring for a one-year programmer position. We are looking for someone with R and C++ experience. There is also a possibility of a part-time position. The deadline for full consideration is February 12. Application information is here: https://aprecruit.berkeley.edu/JPF02822."
  },
  {
    "objectID": "blog/version-0-10-0-of-nimble-released.html",
    "href": "blog/version-0-10-0-of-nimble-released.html",
    "title": "Version 0.10.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.10.0 provides new features, improvements in speed of building models and algorithms, bug fixes, and various improvements.\nNew features and bug fixes include:\n\ngreatly extended NIMBLE’s Chinese Restaurant Process (CRP)-based Bayesian nonparametrics functionality by allowing multiple observations to be grouped together;\nfixed a bug giving incorrect results in our cross-validation function, runCrossValidate();\nmoved NIMBLE’s sequential Monte Carlo (SMC, aka particle filtering) methods into the nimbleSMC package; and\nimproved the efficiency of model and MCMC building and compilation.\n\nPlease see the release notes on our website for more details."
  },
  {
    "objectID": "blog/version-1-0-0-of-nimble-released-providing-automatic-differentiation-laplace-approximation-and-hmc-sampling.html",
    "href": "blog/version-1-0-0-of-nimble-released-providing-automatic-differentiation-laplace-approximation-and-hmc-sampling.html",
    "title": "Version 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 1.0.0 provides substantial new functionality. This includes:\n\nA Laplace approximation algorithm that allows one to find the MLE for model parameters based on approximating the marginal likelihood in models with continuous random effects/latent process values.\nA Hamiltonian Monte Carlo (HMC) MCMC sampler implementing the NUTS algorithm (available in the newly-released nimbleHMC package).\nSupport in NIMBLE’s algorithm programming system to obtain derivatives of functions and arbitrary calculations within models.\nA parameter transformation system allowing algorithms to work in unconstrained parameter spaces when model parameters have constrained domains.\n\nThese are documented via the R help system and a new section at the end of our User Manual. We’re excited for users to try out the new features and let us know of their experiences. In particular, given these major additions to the NIMBLE system, we anticipate the possibility of minor glitches. The best place to reach out for support is still the nimble-users list.\nIn addition to the new functionality above, other enhancements and bug fixes include:\n\nFixing a bug (previously reported in a nimble-users message) giving incorrect results in NIMBLE’s cross-validation function (runCrossValidate) for all but the ‘predictive’ loss function for NIMBLE versions 0.10.0 – 0.13.2.\nFixing a bug in conjugacy checking causing incorrect identification of conjugate relationships in models with unusual uses of subsets, supersets, and slices of multivariate normal nodes.\nImproving control of the addSampler method for MCMC.\nImproving the WAIC system in a few small ways.\nEnhancing error trapping and warning messages.\n\nPlease see the NEWS file in the package source for more details."
  },
  {
    "objectID": "blog/nimble-in-person-short-course-june-1-3-lisbon-portugal.html",
    "href": "blog/nimble-in-person-short-course-june-1-3-lisbon-portugal.html",
    "title": "NIMBLE in-person short course, June 1-3, Lisbon, Portugal",
    "section": "",
    "text": "We’ll be holding a in-person training workshop on NIMBLE, June 1-3, 2022, in Lisbon, Portugal, sponsored by the Centro de Estatística e Aplicações at the Universidade Lisboa (CEAUL).\nNIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nMore details and registration are available at the workshop website. No previous NIMBLE experience is required, but the workshop will assume some familiarity with hierarchical models, Markov chain Monte Carlo (MCMC), and R.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/were-looking-for-a-programmer.html",
    "href": "blog/were-looking-for-a-programmer.html",
    "title": "We’re looking for a programmer",
    "section": "",
    "text": "The NIMBLE project anticipates having some funding for a part-time programmer to implement statistical algorithms and make improvements in nimble’s core code. Examples may include building adaptive Gaussian quadrature in nimble’s programming system and expanding nimble’s hierarchical model system. Remote work is possible. This is not a formal job solicitation, but please send a CV/resume to nimble.stats@gmail.com if you are interested so we can have you on our list. Important skills will be experience with hierarchical statistical modeling algorithms, R programming, and nimble itself. Experience with C++ will be helpful but not required."
  },
  {
    "objectID": "blog/beta-version-of-nimble-with-automatic-differentiation-including-hmc-sampling-and-laplace-approximation.html",
    "href": "blog/beta-version-of-nimble-with-automatic-differentiation-including-hmc-sampling-and-laplace-approximation.html",
    "title": "Beta version of NIMBLE with automatic differentiation, including HMC sampling and Laplace approximation",
    "section": "",
    "text": "We’re excited to announce that NIMBLE now supports automatic differentiation (AD), also known as algorithmic differentiation, in a beta version available on our website. In this beta version, NIMBLE now provides:\n\nHamiltonian Monte Carlo (HMC) sampling for an entire parameter vector or arbitrary subsets of the parameter vector (i.e., combined with other samplers for the remaining parameters).\nLaplace approximation for approximate integration over latent states in a model, allowing maximum likelihood estimation and MCMC based on the marginal likelihood (via the RW_llFunction samplers).\nThe ability for users and algorithm developers to write nimbleFunctions that calculate derivatives of functions, including many but not all mathematical operations that are supported in the NIMBLE language.\n\nWe’re making this beta release available to allow our users to test and evaluate the AD functionality and the new algorithms, but it is not recommended for production use at this stage. So please give it a try, and let us know of any problems or suggestions you have, either via the nimble-users list, bug reports to our GitHub repository, or email to nimble.stats@gmail.com.\nYou can download the beta version and view an extensive draft manual for the AD functionality.\nWe plan to release this functionality in the next NIMBLE release on CRAN in the coming months.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/version-1-2-0-of-nimble-released.html",
    "href": "blog/version-1-2-0-of-nimble-released.html",
    "title": "Version 1.2.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC, Laplace approximation, and SMC).\nThis release provides provides extensive new functionality, including:\n\nA Pólya-gamma sampler, sampler_polyagamma, for conjugate sampling of linear predictor parameters in logistic regression model specifications, including handling zero inflation and stochastic design matrices. This sampler must be added to an MCMC configuration manually.\nA new sampler, sampler_noncentered, which samples the mean or standard deviation of a set of random effect values in a transformed space such that the random effects are deterministically shifted or scaled given new values of their hyperparameters. For random effects written in a centered parameterization, sampling is performed as if they had been written in a noncentered parameterization, thereby enabling a variant on the Yu and Meng (2011) interweaving sampling strategy of sampling in both parameterizations.This sampler must be added to an MCMC configuration manually.\nAdaptive Gauss-Hermite quadrature (AGHQ) for integrating over continuous latent effects, as an extension of NIMBLE’s Laplace approximation functionality. We also add user-friendly R functions, runLaplace and runAGHQ, for using Laplace and AGHQ approximation for maximum likelihood estimation.\nA more flexible optimization system via nimOptim, with support for nlminb built in as well as the capability for users to provide potentially arbitrary optimization functions in R.\nAllowing the use of nimbleFunctions with setup code in models, either for user-defined functions via &lt;- or for user-defined distributions via ~. This supports holding large objects outside of model nodes for use in models.\nA completely revamped MCEM algorithm, using automatic derivatives in the maximization when possible, fixing a bug so that any parts of the model not connected to the latent states are included in MLE calculations, giving greater control and adding minor extensions to the ascent-based MCEM approach, and converting buildMCEM to be a nimbleFunction rather than an R function.\n\nIn addition to the new functionality above, other enhancements and bug fixes include:\n\nImproving the speed of MCMC and MCMC building in certain cases.\nAdding an argument to buildMCMC controlling whether to initialize values in the model.\nProviding the ability to control the number of digits printed in C++ output.\nAllowing use of a categorical MCMC sampler with user-specified dcat-like distributions.\nWarning of use of backward indexing in models.\nImprove documentation of the LKJ distribution and of advanced aspects of writing code for derivative tracking using the AD system.\nFixing an insufficient check for conjugacy in stick-breaking specifications of Bayesian nonparametric distributions.\nFixing compilation failures occurring on Red Hat Linux.\nReenabling functionality for user-provided Eigen library and related updates to the autoconf configuration used in package building.\nEnhancing functionality to support model macros, which will be fully released and documented in the future.\nRemoving deprecated is.na.vec and is.nan.vec functions.\nImproving some warnings and error messages.\n\nPlease see the release notes on our website for more details.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Version 1.2.0 of NIMBLE released"
    ]
  },
  {
    "objectID": "blog/version-0-11-0-of-nimble-released.html",
    "href": "blog/version-0-11-0-of-nimble-released.html",
    "title": "Version 0.11.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.11.0 provides a variety of new functionality, improved error trapping, and bug fixes, including:\n\nadded the ‘posterior_predictive_branch’ MCMC sampler, which samples jointly from the predictive distribution of networks of entirely non-data nodes, to improve MCMC mixing,\nadded a model method to find parent nodes, called getParents(), analogous to getDependencies(),\nimproved efficiency of conjugate samplers,\nallowed use of the elliptical slice sampler for univariate nodes, which can be useful for posteriors with multiple modes,\nallowed model definition using if-then-else without an else clause, and\nfixed a bug giving incorrect node names and potentially affecting algorithm behavior for models with more than 100,000 elements in a vector node or any dimension of a multi-dimensional node.\n\nPlease see the release notes on our website for more details."
  },
  {
    "objectID": "blog/version-0-10-1-of-nimble-released.html",
    "href": "blog/version-0-10-1-of-nimble-released.html",
    "title": "Version 0.10.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nWe’ve released version 0.10.1. Version 0.10.1 is primarily a bug fix release:\n– In particular, it fixes a bug in retrieving parameter values from distributions that was introduced in version 0.10.0. The bug can cause incorrect behavior of conjugate MCMC samplers under certain model structures (such as particular state-space models), so we strongly encourage users to upgrade to 0.10.1.\n– In addition, version 0.10.1 restricts use of WAIC to the conditional version of WAIC (conditioning on all parameters directly involved in the likelihood). Previous versions of nimble gave incorrect results when not conditioning on all parameters directly involved in the likelihood (i.e., when not monitoring all such parameters). In a future version of nimble we plan to make a number of improvements to WAIC, including allowing use of marginal versions of WAIC, where the WAIC calculation integrates over random effects.\nPlease see the release notes on our website for more details."
  },
  {
    "objectID": "blog/version-0-11-1-of-nimble-released.html",
    "href": "blog/version-0-11-1-of-nimble-released.html",
    "title": "Version 0.11.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.11.1 is a bug fix release, fixing a bug that was introduced in Version 0.11.0 (which was released on April 17, 2021) that affected MCMC sampling in MCMCs using the “posterior_predictive_branch” sampler introduced in version 0.11.0. This sampler would be listed by name when the MCMC configuration object is created and would be assigned to any set of multiple nodes that (as a group of nodes) have no data dependencies and are therefore sampled as a group from their predictive distributions.\nFor those currently using version 0.11.0, please update your version of NIMBLE. For users currently using other versions, this release won’t directly affect you, but we generally encourage you to update as we release new versions."
  },
  {
    "objectID": "blog/version-0-13-1-of-nimble-released.html",
    "href": "blog/version-0-13-1-of-nimble-released.html",
    "title": "Version 0.13.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. This version is purely a bug fix release that fixes a bug introduced in our new handling of predictive nodes in version 0.13.0 (released in November). If you installed version 0.13.0, please upgrade to 0.13.1."
  },
  {
    "objectID": "blog/nimblehmc-version-0-2-0-released-providing-improved-hmc-performance.html",
    "href": "blog/nimblehmc-version-0-2-0-released-providing-improved-hmc-performance.html",
    "title": "nimbleHMC version 0.2.0 released, providing improved HMC performance",
    "section": "",
    "text": "nimbleHMC provides Hamiltonian Monte Carlo samplers for use with NIMBLE, in particular NUTS samplers. NIMBLE’s HMC samplers can be flexibly assigned to a subset of model parameters, allowing users to consider various sampling configurations.\nWe’ve released version 0.2.0 of nimbleHMC, which includes a new default NUTS sampler inspired by Stan’s implementation of NUTS. It also provides an updated version of our previous NUTS sampler (which is based on the original Hoffman and Gelman paper, and is now called the ‘NUTS_classic’ sampler in NIMBLE) that fixes performance issues in version 0.1.1."
  },
  {
    "objectID": "blog/version-1-2-1-of-nimble-released.html",
    "href": "blog/version-1-2-1-of-nimble-released.html",
    "title": "Version 1.2.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC, Laplace approximation, and SMC).\nThis is a micro release that primarily addresses some packaging changes requested by CRAN. In addition, this release includes:\n\nA multinomial MCMC sampler, sampler_RW_multinomial, for random variables following a multinomial distribution.\nSome enhancements to error trapping and warning messages.\nA variety of minor bug fixes.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Version 1.2.1 of NIMBLE released"
    ]
  },
  {
    "objectID": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html",
    "href": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html",
    "title": "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models",
    "section": "",
    "text": "(Prepared by Claudia Wehrhahn)",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models"
    ]
  },
  {
    "objectID": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#overview",
    "href": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#overview",
    "title": "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models",
    "section": "Overview",
    "text": "Overview\nNIMBLE is a hierarchical modeling package that uses nearly the same language for model specification as the popular MCMC packages WinBUGS, OpenBUGS and JAGS, while making the modeling language extensible — you can add distributions and functions — and also allowing customization of the algorithms used to estimate the parameters of the model.\nNIMBLE supports Markov chain Monte Carlo (MCMC) inference for Bayesian nonparametric (BNP) mixture models. Specifically, NIMBLE provides functionality for fitting models involving Dirichlet process priors using either the Chinese Restaurant Process (CRP) or a truncated stick-breaking (SB) representation.\nIn version 0.10.1, we’ve extended NIMBLE to be able to handle more general multivariate models when using the CRP prior. In particular, one can now easily use the CRP prior when multiple observations (or multiple latent variables) are being jointly clustered. For example, in a longitudinal study, one may want to cluster at the individual level, i.e., to jointly cluster all of the observations for each of the individuals in the study. (Formerly this was only possible in NIMBLE by specifying the observations for each individual as coming from a single multivariate distribution.)\nThis allows one to specify a multivariate mixture kernel as the product of univariate ones. This is particularly useful when working with discrete data. In general, multivariate extensions of well-known univariate discrete distributions, such as the Bernoulli, Poisson and Gamma, are not straightforward. For example, for multivariate count data, a multivariate Poisson distribution might appear to be a good fit, yet its definition is not trivial, inference is cumbersome, and the model lacks flexibility to deal with overdispersion. See Inouye et al. (2017) for a review on multivariate distributions for count data based on the Poisson distribution.\nIn this post, we illustrate NIMBLE’s new extended BNP capabilities by modelling multivariate discrete data. Specifically, we show how to model multivariate count data from a longitudinal study under a nonparametric framework. The modeling approach is simple and introduces correlation in the measurements within subjects.\nFor more detailed information on NIMBLE and Bayesian nonparametrics in NIMBLE, see the User Manual.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models"
    ]
  },
  {
    "objectID": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#bnp-analysis-of-epileptic-seizure-count-data",
    "href": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#bnp-analysis-of-epileptic-seizure-count-data",
    "title": "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models",
    "section": "BNP analysis of epileptic seizure count data",
    "text": "BNP analysis of epileptic seizure count data\nWe illustrate the use of nonparametric multivariate mixture models for modeling counts of epileptic seizures from a longitudinal study of the drug progabide as an adjuvant antiepileptic chemotherapy. The data, originally reported in Leppik et al. (1985), arise from a clinical trial of 59 people with epilepsy. At four clinic visits, subjects reported the number of seizures occurring over successive two-week periods. Additional data include the baseline seizure count and the age of the patient. Patients were randomized to receive either progabide or a placebo, in addition to standard chemotherapy.\nload(url(\"https://r-nimble.org/nimbleExamples/seizures.Rda\"))\nnames(seizures)\n\n\n\n## [1] \"id\"    \"seize\" \"visit\" \"trt\"   \"age\"\n\n\n\nhead(seizures)\n\n\n\n##    id seize visit trt age\n## 1 101    76     0   1  18\n## 2 101    11     1   1  18\n## 3 101    14     2   1  18\n## 4 101     9     3   1  18\n## 5 101     8     4   1  18\n## 6 102    38     0   1  32\n\nModel formulation\nWe model the joint distribution of the baseline number of seizures and the counts from each of the two-week periods as a Dirichlet Process mixture (DPM) of products of Poisson distributions. Let , where  denotes the seizure count for patient  measured at visit , for , and . The value for  is the baseline count. The model takes the form\n\nwhere  and  corresponds to a product of Gamma distributions.\nOur specification uses a product of Poisson distributions as the kernel in the DPM which, at first sight, would suggest independence of the repeated seizure count measurements. However, because we are mixing over the parameters, this specification in fact induces dependence within subjects, with the strength of the dependence being inferred from the data. In order to specify the model in NIMBLE, first we translate the information in seize into a matrix and then we write the NIMBLE code.\nWe specify this model in NIMBLE with the following code in R. The vector xi contains the latent cluster IDs, one for each patient.\nn &lt;- 59\nJ &lt;- 5\ndata &lt;- list(y = matrix(seizures$seize, ncol = J, nrow = n, byrow = TRUE))\nconstants &lt;- list(n = n, J = J)\n\ncode &lt;- nimbleCode({\n  for(i in 1:n) {\n    for(j in 1:J) {\n      y[i, j] ~ dpois(lambda[xi[i], j])\n    }\n  }\n  for(i in 1:n) {\n    for(j in 1:J) {\n      lambda[i, j] ~ dgamma(shape = 1, rate = 0.1)\n    }\n  }\n  xi[1:n] ~ dCRP(conc = alpha, size = n)\n  alpha ~ dgamma(shape = 1, rate = 1)\n})\n\n\nRunning the MCMC\nThe following code sets up the data and constants, initializes the parameters, defines the model object, and builds and runs the MCMC algorithm. For speed, the MCMC runs using compiled C++ code, hence the calls to compileNimble to create compiled versions of the model and the MCMC algorithm.\nBecause the specification is in terms of a Chinese restaurant process, the default sampler selected by NIMBLE is a collapsed Gibbs sampler. More specifically, because the baseline distribution  is conjugate to the product of Poisson kernels, Algorithm 2 from Neal (2000) is used.\nset.seed(1)\ninits &lt;- list(xi = 1:n, alpha = 1,\n             lambda = matrix(rgamma(J*n, shape = 1, rate = 0.1), ncol = J, nrow = n))\nmodel &lt;- nimbleModel(code, data=data, inits = inits, constants = constants, dimensions = list(lambda = c(n, J)))\n\n\n\n## defining model...\n\n\n\n## building model...\n\n\n\n## setting data and initial values...\n\n\n\n## running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... \n## checking model sizes and dimensions...\n## model building finished.\n\n\n\ncmodel &lt;- compileNimble(model)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n## compilation finished.\n\n\n\nconf &lt;- configureMCMC(model, monitors = c('xi','lambda', 'alpha'), print = TRUE)\n\n\n\n## ===== Monitors =====\n## thin = 1: xi, lambda, alpha\n## ===== Samplers =====\n## CRP_concentration sampler (1)\n##   - alpha\n## CRP_cluster_wrapper sampler (295)\n##   - lambda[]  (295 elements)\n## CRP sampler (1)\n##   - xi[1:59]\n\n\n\nmcmc &lt;- buildMCMC(conf)\ncmcmc &lt;- compileNimble(mcmc, project = model)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n## compilation finished.\n\n\n\nsamples &lt;- runMCMC(cmcmc,  niter=55000, nburnin = 5000, thin=10)\n\n\n\n## running chain 1...\n\n\n\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nWe can extract posterior samples for some parameters of interest. The following are trace plots of the posterior samples for the concentration parameter, , and the number of clusters.\nxiSamples &lt;- samples[, grep('xi', colnames(samples))]    # samples of cluster IDs\nnGroups &lt;- apply(xiSamples, 1, function(x)  length(unique(x)))\nconcSamples &lt;- samples[, grep('alpha', colnames(samples))]\n\npar(mfrow=c(1, 2))\nts.plot(concSamples, xlab = \"Iteration\", ylab = expression(alpha), main = expression(paste('Traceplot for ', alpha)))\nts.plot(nGroups,  xlab = \"Iteration\", ylab = \"Number of components\", main = \"Number of clusters\")\n\n\n\nplot of chunk longitudinalStudy-bnp-output\n\n\n\n\nAssessing the posterior\nWe can compute the posterior predictive distribution for a new observation , , which in turn allows us to obtain univariate or multivariate marginals or conditionals, or any other density estimate of interest. As an illustration, we compute the bivariate posterior predictive distribution for the number of seizures at baseline and at the 4th hospital visit. This is done in two steps. First, we compute posterior samples of the random measure , which can be done using the getSamplesDPmeasure() function. Based on the MCMC output, getSamplesDPmeasure() returns a list of matrices, each of them corresponding to a single posterior sample from , using its stick-breaking (SB) representation. The first column of each of these matrices contains the weights of the SB representation of  while the rest of the columns contain the atoms of the SB representation of , here . Second, we compute the bivariate posterior predictive distribution of the seizure counts at baseline and at the fourth visit, based on the posterior samples of . We use a compiled nimble function, called ‘bivariate’, to speed up the computations of the bivariate posterior predictive density.\n# samples from the random measure\nsamplesG &lt;- getSamplesDPmeasure(cmcmc)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\n\n## compilation finished.\n\n\n\nniter &lt;- length(samplesG)\nweightsIndex &lt;- grep('weights', colnames(samplesG[[1]]))\nlambdaIndex &lt;- grep('lambda', colnames(samplesG[[1]]))\nygrid &lt;- 0:45\n\n# function used to compute bivariate posterior predictive\nbivariateFun &lt;- nimbleFunction(\n  run = function(w = double(1),\n               lambda1 = double(1),\n               lambda5 = double(1),\n               ytilde = double(1)) {\n    returnType(double(2))\n\n    ngrid &lt;- length(ytilde)\n    out &lt;- matrix(0, ncol = ngrid, nrow = ngrid)\n\n    for(i in 1:ngrid) {\n      for(j in 1:ngrid) {\n        out[i, j] &lt;- sum(w * dpois(ytilde[i], lambda1) * dpois(ytilde[j], lambda5))\n      }\n    }\n\n    return(out)\n  }\n)\ncbivariateFun &lt;- compileNimble(bivariateFun)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n## compilation finished.\n\n\n\n# computing bivariate posterior predictive of seizure counts are baseline and fourth visit\nbivariate &lt;- matrix(0, ncol = length(ygrid), nrow = length(ygrid))\nfor(iter in 1:niter) {\n  weights &lt;- samplesG[[iter]][, weightsIndex] # posterior weights\n  lambdaBaseline &lt;- samplesG[[iter]][, lambdaIndex[1]] # posterior rate of baseline\n  lambdaVisit4 &lt;- samplesG[[iter]][, lambdaIndex[5]] # posterior rate at fourth visit\n  bivariate &lt;- bivariate + cbivariateFun(weights, lambdaBaseline, lambdaVisit4, ygrid)\n}\nbivariate &lt;- bivariate / niter\nThe following code creates a heatmap of the posterior predictive bivariate distribution of the number of seizures at baseline and at the fourth hospital visit, showing that there is a positive correlation between these two measurements.\ncollist &lt;- colorRampPalette(c('white', 'grey', 'black'))\nimage.plot(ygrid, ygrid, bivariate, col = collist(6),\n           xlab = 'Baseline', ylab = '4th visit', ylim = c(0, 15), axes = TRUE)\n\n\n\nplot of chunk longitudinalStudy-bnp-bivariate-heatmap\n\n\nIn order to describe the uncertainty in the posterior clustering structure of the individuals in the study, we present a heat map of the posterior probability of two subjects belonging to the same cluster. To do this, first we compute the posterior pairwise clustering matrix that describes the probability of two individuals belonging to the same cluster, then we reorder the observations and finally plot the associated heatmap.\npairMatrix &lt;- apply(xiSamples, 2, function(focal) {\n                                   colSums(focal == xiSamples)\n                                  })\npairMatrix &lt;- pairMatrix / niter\n\n\nnewOrder &lt;- c(1, 35, 13, 16, 32, 33,  2, 29, 39, 26, 28, 52, 17, 15, 23,  8, 31,\n              38,  9, 46, 45, 11, 49, 44, 50, 41, 54, 21,  3, 40, 47, 48, 12,\n              6, 14,  7, 18, 22, 30, 55, 19, 34, 56, 57,  4,  5, 58, 10, 43, 25,\n              59, 20, 27, 24, 36, 37, 42, 51, 53)\n\nreordered_pairMatrix &lt;- pairMatrix[newOrder, newOrder]\nimage.plot(1:n, 1:n, reordered_pairMatrix , col = collist(6),\n           xlab = 'Patient', ylab = 'Patient',  axes = TRUE)\naxis(1, at = 1:n, labels = FALSE, tck = -.02)\naxis(2, at = 1:n, labels = FALSE, tck = -.02)\naxis(3, at = 1:n, tck = 0, labels = FALSE)\naxis(4, at = 1:n, tck = 0, labels = FALSE)\n\n\n\nplot of chunk longitudinalStudy-bnp-pairwise",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models"
    ]
  },
  {
    "objectID": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#references",
    "href": "blog/bayesian-nonparametric-models-in-nimble-general-multivariate-models.html#references",
    "title": "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models",
    "section": "References",
    "text": "References\nInouye, D.I., E. Yang, G.I. Allen, and P. Ravikumar. 2017. A Review of Multivariate Distributions for Count Data Derived from the Poisson Distribution. Wiley Interdisciplinary Reviews: Computational Statistics 9: e1398.\nLeppik, I., F. Dreifuss, T. Bowman, N. Santilli, M. Jacobs, C. Crosby, J. Cloyd, et al. 1985. A Double-Blind Crossover Evaluation of Progabide in Partial Seizures: 3: 15 Pm8. Neurology 35.\nNeal, R. 2000. Markov chain sampling methods for Dirichlet process mixture models. Journal of Computational and Graphical Statistics 9: 249–65.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Bayesian Nonparametric Models in NIMBLE: General Multivariate Models"
    ]
  },
  {
    "objectID": "blog/version-0-6-0-of-nimble-released.html",
    "href": "blog/version-0-6-0-of-nimble-released.html",
    "title": "Version 0.6-6 of NIMBLE released!",
    "section": "",
    "text": "We’ve just released the newest version of NIMBLE on CRAN and on our website. Version 0.6-6 has some important new features, and more are on the way in the next few months.\nЭти артефакты не имели практической или коммерческой ценности. На самом деле их продажа была строго запрещена обычаем. А так как предметы всегда находились в движении, их владельцы редко носили их. Тем не менее, массимы совершали модные подарки подруге долгие путешествия, чтобы обменять их, рискуя жизнью и здоровьем, когда они путешествовали по коварным водам Тихого океана на своих шатких каноэ.\nNew features include:\n\ndynamic indexes are now allowed in BUGS code — indexes of a variable no longer need to be constants but can be other nodes or functions of other nodes; for this release this is a beta feature that needs to be enabled with nimbleOptions(allowDynamicIndexing = TRUE);\nthe intrinsic Gaussian CAR (conditional autoregressive) model can now be used in BUGS code as dcar_normal, which behaves similarly to BUGS’ car.normal distribution;\noptim is now part of the NIMBLE language and can be used in nimbleFunctions;\nit is possible to call out to external compiled code or back to R functions from a nimbleFunction using nimbleExternalCall() and nimbleRcall() (this is an experimental feature);\nthe WAIC model selection criterion can be calculated using the calculateWAIC() method for MCMC objects;\nthe bootstrap and auxiliary particle filters can now return their ESS values;\nand a variety of bug fixes.\n\nPlease see the NEWS file in the installed package for more details.\nFinally, we’re deep in the midst of development work to enable automatic differentiation, Tensorflow as an alternative back-end computational engine, additional spatial models, and Bayesian nonparametrics."
  },
  {
    "objectID": "release-notes.html",
    "href": "release-notes.html",
    "title": "Release notes",
    "section": "",
    "text": "December 19, 2024: We’re released Version 1.3.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website.\nVersion 1.3.0 provides some new and improved functionality, plus some bug fixes and improved error trapping.\nThe new and improved functionality includes:\n\nA new multivariate sampler, the Barker proposal sampler (sampler_barker). We encourage users to try this sampler in place of the block Metropolis RW_block sampler and let us know how well it works. The Barker sampler uses gradient information and may improve adaptation behavior, including better mixing when parameters are on different scales or the initial proposal scale is too large.\nAn improved Laplace/AGHQ implementation that includes use of the nlminb optimizer for both inner and outer optimization (for better optimization performance), improved messaging and output naming, returning the log-likelihood and degrees of freedom for model selection calculations, and unified control of optimization method and other controls at either the build stage or through the updateSettings method.\nThe addition of the BOBYQA optimization method through nimOptim, registered via nimOptimMethod.\n\nIn addition to the new and improved functionality above, other bug fixes, improved error trapping, and enhancements include:\n\nPreventing the use of nimbleFunction method names and nimbleFunction names that conflict with names in the nimble language (DSL).\nMore carefully checking for and warning of cases of NaN and non-finite log probability values in various samplers that in some cases may indicate invalid MCMC sampling.\nMore carefully handling of NaN and non-finite log probability values in the CRP sampler.\nError trapping cases of dynamic indices producing a non-scalar result in AD-enabled models, and provide a suggested work-around.\nError trapping use of non-existent nimbleList.\nPreventing use of a single seed when running multiple chains via runMCMC.\nImproving messaging related to lack of derivative support for functions.\nAdding information about model macros to the manual.\nFixing bug in caching values in the CRP sampler when maximum number of clusters is exceeded, which would have caused incorrect sampling (albeit with the user having been warned that they should increase the maximum number of clusters).\nFixing an issue preventing use of nimbleList elements in nimCat.\nPreventing an adaptation interval of one for various block samplers for which an interval of one leads to an error.\nAllowing runLaplace to use an uncompiled Laplace object.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJuly 31, 2024: We’ve released Version 1.2.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. This is a micro release that primarily addresses some packaging changes requested by CRAN. In addition this release includes:\n\nA multinomial MCMC sampler, sampler_RW_multinomial, for random variables following a multinomial distribution.\nSome enhancements to error trapping and warning messages.\nA variety of minor bug fixes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 9, 2024: We’ve released Version 1.2.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website.\nVersion 1.2.0 provides extensive new functionality, including:\n\nA Pólya-gamma sampler, sampler_polyagamma, for conjugate sampling of linear predictor parameters in logistic regression model specifications, including handling zero inflation and stochastic design matrices.\nA new sampler, sampler_noncentered, which samples the mean or standard deviation of a set of random effect values in a transformed space such that the random effects are deterministically shifted or scaled given new values of their hyperparameters. For random effects written in a centered parameterization, sampling is performed as if they had been written in a noncentered parameterization, thereby enabling a variant on the Yu and Meng (2011) interweaving sampling strategy of sampling in both parameterizations.\nA completely revamped MCEM algorithm, fixing a bug so that any parts of the model not connected to the latent states are included in MLE calculations, giving greater control and adding minor extensions to the ascent-based MCEM approach, using automatic derivatives in the maximization when possible, and converting buildMCEM to be a nimbleFunction rather than an R function.\nAdaptive Gauss-Hermite quadrature (AGHQ) for integrating over latent effects, as an extension of NIMBLE’s Laplace approximation functionality. Also adds user-friendly R functions, runLaplace and runAGHQ, for using Laplace and AGHQ approximation for maximum likelihood estimation.\nA more flexible optimization system via nimOptim, with support for nlminb built in as well as the capability for users to provide potentially arbitrary optimization functions in R.\nAllowing the use of nimbleFunctions with setup code in models either for user-defined functions via &lt;- or for user-defined distributions via ~. This supports holding large objects outside of model nodes for use in models.\n\nIn addition to the new functionality above, other enhancements and bug fixes include:\n\nSome internal improvements to increase speed of model and MCMC building in certain cases.\nSome fixes and improvements in error-trapping and warnings.\nAdding an argument to buildMCMC controlling whether to initialize values in the model.\nProviding ability to control number of digits printed in C++ output.\nAllowing use of categorical MCMC sampler with user-specified dcat-like distributions.\nImprove documentation of LKJ distribution and derivative tracking in the AD system.\nFixing an insufficient check for conjugacy in stickbreaking specifications.\nFixing compilation failures occurring on Red Hat Linux.\nReenabling functionality for user-provided Eigen library and related updates to autoconf configuration.\nEnhancing functionality to support model macros.\nRemoving deprecated is.na.vec and is.nan.vec.\nRemoving deprecated dummy functions for compareMCMCs functions.\n\n\n\nJanuary 31, 2024: We’ve released Version 1.1.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website. This version provides new functionality and a variety of bug fixes.\n\nImproving our automatic differentiation (AD) system so it can be used in a wider range of models, including models with stochastic indexing, discrete latent states, and CAR distributions. Support for AD for these models means that HMC sampling and Laplace approximation can be used.\nAllowing distributions and functions (whether user-defined or built-in) that lack AD support (such as dinterval, dconstraint, and truncated distributions) to be used and compiled in AD-enabled models. The added flexibility increases the range of models in which one can use AD methods (HMC or Laplace) on some parts of a model and other samplers or methods on other parts.\nAdding nimIntegrate to the NIMBLE language, providing one-dimensional numerical integration via adaptive quadrature, equivalent to R’s integrate. This can, for example, be used in a user-defined function or distribution for use in model code, such as to implement certain point process or survival models that involve a one-dimensional integral.\nAdding a “prior samples” MCMC sampler, which uses an existing set of numerical samples to define the prior distribution of model node(s).\nBetter support of the dCRP distribution in non-standard model structures.\nAdding error trapping to prevent accidental use of C++ keywords as model variable names.\nRemoving the RW_multinomial MCMC sampler, which was found to generate incorrect posterior results (in cases when a latent state followed a multinomial distribution)\nFixing a bug in conjugacy checking in a case of subsets of multivariate nodes.\nFixing is.na and is.nan to operate in the expected vectorized fashion.\nImproving documentation of AD, nimbleHMC, and nimbleSMC in the manual.\nUpdating Eigen (the C++ linear algebra library used by nimble) to version 3.4.0.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 15, 2023: We’ve released Version 1.0.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 1.0.1 follows shortly after 1.0.0 and fixes an issue and a bug introduced in version 1.0.0 causing data to be set incorrectly in certain models.\nBoth cases occur only when a variable (e.g., “x”) contains both stochastic nodes (e.g. “x[2] ~ ”) and either deterministic nodes (e.g. “x[3] &lt;- ”) or right-hand-side-only nodes (e.g. “x[4]” appears only on the right-hand-side, like an explanatory value).\nThe issue involves a change of behavior (relative to previous nimble versions) when both setting data values for some nodes and initial values for other nodes within the same variable (that satisfies the previous condition). Data values for right-hand-side-only nodes were replaced by initial values (inits) if both were provided. Version 1.0.1 reverts to previous behavior that data values are not replaced by initial values in that situation.\nThe bug involves models where (for a variable satisfying the previous condition) not every scalar element within the variable is used as a node and some of the nodes in the variable are data. In that situation, data values may be set incorrectly. This could typically occur in models with autoregressive structure directly on some data nodes (such as may be the case for capture-recapture models involving many individual capture histories within the same variable, indexed by individual and time, with some individuals not present for the entire time series, resulting in unused scalar elements of the variable).\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMay 26, 2023: We’ve released Version 1.0.0\nWe’re very pleased to announce the release of version 1.0.0 of NIMBLE. This version provides substantial new functionality. This includes:\n\nA Laplace approximation algorithm that allows one to find the MLE for model parameters based on approximating the marginal likelihood in models with continuous random effects/latent process values.\nA Hamiltonian Monte Carlo (HMC) MCMC sampler implementing the NUTS algorithm (available in the nimbleHMC package).\nSupport in NIMBLE’s algorithm programming system to obtain derivatives of functions and arbitrary calculations within models.\nA parameter transformation system allowing algorithms to work in unconstrained parameter spaces when model parameters have constrained domains.\n\nThese are documented via the R help system and a new section at the end of our User Manual. We’re excited for users to try out the new features and let us know of their experiences. In particular, given these major additions to the NIMBLE system, we anticipate the possibility of minor glitches. The best place to reach out for support is still the nimble-users list.\nIn addition to the new functionality above, other enhancements and bug fixes include:\n\nFixing a bug (previously reported in a nimble-users message) giving incorrect results in NIMBLE’s cross-validation function (runCrossValidate) for all but the ‘predictive’ loss function for NIMBLE versions 0.10.0 – 0.13.2.\nFixing a bug in conjugacy checking causing incorrect identification of conjugate relationships in models with unusual uses of subsets, supersets, and slices of multivariate normal nodes.\nImproving control of the addSampler method for MCMC.\nImproving the WAIC system in a few small ways.\nEnhancing error trapping and warning messages.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMay 15, 2023: We’ve released Version 0.13.2\nWe’ve released the newest version of NIMBLE on CRAN. This version exists solely to address some developer-level issues required by CRAN and is identical to version 0.13.2 from a user perspective.\n\n\nDecember 13, 2022: We’ve released Version 0.13.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. This is purely a bug fix release that fixes a bug in our new handling of predictive nodes introduced in the recently released Version 0.13.0. The bug could affect MCMC sampling in models that both (1) have predictive nodes and (2) have multivariate nodes.\n\n\nNovember 15, 2022: We’ve released Version 0.13.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website. The main highlight of this version is a major change to how predictive nodes are handled in MCMC sampling that should improve mixing for models with predictive nodes. The changes in version 0.13.0 include:\n\nThoroughly revamping handling of posterior predictive nodes in the MCMC system, in particular that MCMC samplers, by default, will now exclude predictive dependencies from internal sampler calculations. This should improve MCMC mixing for models with predictive nodes. Posterior predictive nodes are now sampled conditional on all other model nodes at the end of each MCMC iteration.\nAdding functionality to the MCMC configuration system, including a new replaceSamplers method and arguments default and nodes for the addSamplers method.\nAdding an option to the WAIC system to allow additional burnin (in addition to standard MCMC burnin) before calculating online WAIC, thereby allowing inspection of initial samples without forcing them to be used for WAIC\nWarning users of unused constants during model building.\nFixing bugs that prevented use of variables starting with ‘logProb’ or named ‘i’ in model code.\nFixing a bug to prevent infinite recursion in particular cases in conjugacy checking.\nFixing a bug in simulating from dcar_normal nodes when multiple nodes passed to simulate.\n\n\n\nFebruary 24, 2022: We’ve released Version 0.12.2, which includes an important bug fix for some models using Bayesian nonparametrics with the dCRP distribution\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.12.2 is a bug fix release. In particular, this release fixes a bug in our Bayesian nonparametric distribution (BNP) functionality that gives incorrect MCMC results when using the dCRP distribution when the parameters of the mixture components (i.e., the clusters) have hyperparameters (i.e., the base measure parameters) that are unknown and sampled during the MCMC. Here is an example basic model structure that is affected by the bug:\nk[1:n] ~ dCRP(alpha, n)\nfor(i in 1:n) {\n  y[i] ~ dnorm(mu[k[i]], 1)\n  mu[i] ~ dnorm(mu0, 1)    ## mixture component parameters with hyperparameter\n}\nmu0 ~ dnorm(0, 1)    ## unknown cluster hyperparameter\n(There is no problem without the hyperparameter layer – i.e., if mu0 is a fixed value – which is the situation in many models.) We strongly encourage users using models with this structure to rerun their analyses.\nOther changes in this release include:\n\nFixing an issue with reversible jump variable selection under a similar situation to the BNP issue discussed above (in particular where there are unknown hyperparameters of the regression coefficients being considered, which would likely be an unusual use case).\nFixing a bug preventing setup of conjugate samplers for dwishart or dinvwishart nodes when using dynamic indexing.\nFixing a bug preventing use of truncation bounds specified via data or constants.\nFixing a bug preventing MCMC sampling with the LKJ prior for 2×2 matrices.\nFixing a bug in runCrossValidate affecting extraction of multivariate nodes.\nFixing a bug producing incorrect subset assignment into logical vectors in nimbleFunction code.\nFixing a bug preventing use of nimbleExternalCall with a constant expression.\nFixing a bug preventing use of recursion in nimbleFunctions without setup code.\nFixing handling nimSeq default by value.\nFixing access to member data more than two dimensions in a nested nimbleFunction.\n\nPlease see the NEWS file in the source package or the nimble-dev Github site for more detailed information.\n\n\nOctober 12, 2021: We’ve released Version 0.12.1 (including changes in Version 0.12.0)\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.12.1, in combination with version 0.12.0 (which was released just last week), provides a variety of new functionality (in particular enhanced WAIC functionality and adding the LKJ distribution) plus bug fixes affecting MCMC in specific narrow cases described below and that warrant upgrading for some users. The changes include:\n\nCompletely revamping WAIC in NIMBLE, creating an online version that does not require any particular variable monitors. The new WAIC can calculate conditional or marginal WAIC and can group data nodes into joint likelihood terms if desired. In addition there is a new calculateWAIC() function that will calculate the basic conditional WAIC from MCMC output without having to enable the WAIC when creating the MCMC.\nAdding the LKJ distribution, useful for prior distributions for correlation matrices, along with random walk samplers for them. These samplers operate in an unconstrained transformed parameter space and are assigned by default during MCMC configuration.\nFixing a bug introduced in conjugacy processing in version 0.11.0 that causes incorrect MCMC sampling only in specific cases. The impacted cases have terms of the form “a[i] + x[i] * beta” (or more simply “x[i] * beta”), with beta subject to conjugate sampling and either (i) ‘x’ provided via NIMBLE’s constants argument and x[1] == 1 or (ii) ‘a’ provided via NIMBLE’s constants argument and a[1] == 0.\nFixing an error in the sampler for the proper CAR distribution (dcar_proper) that gives incorrect MCMC results when the mean of the proper CAR is not the same value for all locations, e.g., when embedding covariate effects directly in the mu parameter of the dcar_proper distribution.\nFixing isData(‘y’) to return TRUE whenever any elements of a multivariate data node (‘y’) are flagged as data. As a result, attempting to carry out MCMC on the non-data elements will now fail. Formerly if only some elements were flagged as data, isData would only check the first element, potentially leading to other elements that were flagged as data being overwritten.\nError trapping cases where a BNP model has a differing number of dependent stochastic nodes (e.g., observations) or dependent deterministic nodes per group of elements clustered jointly (using functionality introduced in version 0.10.0). Previously we were not error trapping this, and incorrect MCMC results would be obtained.\nImproving the formatting of standard logging messages.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMay 24, 2021: We’ve released Version 0.11.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.11.1 is primarily a bug fix release that fixes a bug that was introduced in Version 0.11.0 (which was released on April 17, 2021) that affected MCMC sampling in MCMCs using the “posterior_predictive_branch” sampler introduced in version 0.11.0. This sampler would be listed by name when the MCMC configuration object is created and would be assigned to any set of multiple nodes that (as a group of nodes) have no data dependencies and are therefore sampled as a group from their predictive distributions.\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nApril 17, 2021: We’ve released Version 0.11.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website.\nWe’ve released version 0.11.0. Version 0.11.0 provides a variety of new functionality, improved error trapping, and bug fixes, including:\n\nadded the ‘posterior_predictive_branch’ MCMC sampler, which samples jointly from the predictive distribution of networks of entirely non-data nodes, to improve MCMC mixing,\nadded a model method to find parent nodes, getParents(), analogous to getDependencies(),\nimproved efficiency of conjugate samplers,\nallowed use of the elliptical slice sampler for univariate nodes, which can be useful for posteriors with multiple modes,\nallowed model definition using if-then-else without an else clause, and\nfixed a bug giving incorrect node names and potentially affecting algorithm behavior for models with more than 100,000 elements in a vector node or in any dimension of a multi-dimensional node.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nNovember 30, 2020: We’ve released Version 0.10.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.10.1 is primarily a bug fix release:\n\nIn particular, it fixes a bug in retrieving parameter values from distributions that was introduced in version 0.10.0. The bug can cause incorrect behavior of conjugate MCMC samplers under certain model structures (such as particular state-space models), so we strongly encourage users to upgrade to 0.10.1.\nIn addition, version 0.10.1 restricts use of WAIC to the conditional version of WAIC (conditioning on all parameters directly involved in the likelihood). Previous versions of nimble gave incorrect results when not conditioning on all parameters directly involved in the likelihood (i.e., when not monitoring all such parameters). In a future version of nimble we plan to make a number of improvements to WAIC, including allowing use of marginal versions of WAIC, where the WAIC calculation integrates over random effects.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nOctober 12, 2020: We’ve released Version 0.10.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.10.0 provides new features, improvements in speed of building models and algorithms, bug fixes, and various improvements.\nNew features and bug fixes include:\n\ngreatly extended NIMBLE’s CRP-based BNP functionality by allowing multiple observations to be grouped together;\nfixed a bug giving incorrect results in our cross-validation function, runCrossValidate();\nmoved NIMBLE’s sequential Monte Carlo (SMC, aka particle filtering) methods into the nimbleSMC package; and\nimproved the efficiency of model and MCMC building and compilation.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMay 22, 2020: We’ve released Version 0.9.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.9.1 is primarily a bug fix release, but also provides some minor improvements in functionality.\nUsers of NIMBLE in R 4.0 on Windows MUST upgrade to this release for NIMBLE to work.\nNew features and bug fixes include:\n\nswitched to use of system2() from system() to avoid an issue on Windows in R 4.0;\nmodified various adaptive MCMC samplers so the exponent controlling the scale decay of the adaptation is adjustable by user;\nallowed pmin() and pmax() to be used in models;\nimproved handling of NA values in the dCRP distribution; and\nimproved handling of cases where indexing goes beyond the extent of a variable in expandNodeNames() and related queries of model structure.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nDecember 20, 2019: We’ve released Version 0.9.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.9.0 provides some new features as well as providing a variety of speed improvements, better output handling, and bug fixes.\nNew features and bug fixes include:\n\nadded an iterated filtering 2 (IF2) algorithm (a new sequential Monte Carlo (SMC) method) for parameter estimation via maximum likelihood;\nfixed several bugs in our SMC algorithms;\nimproved the speed of MCMC configuration;\nimproved the user interface for interacting with the MCMC configuration; and\nimproved our conjugacy checking system to detect some additional cases of conjugacy.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 3, 2019: We’ve released Version 0.8.0\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.8.0 provides some new features as well as providing a variety of speed improvements, better errors/warnings and bug fixes.\nNew features and bug fixes include:\n\nadded a reversible jump MCMC sampler for variable selection via configureRJ();\ngreatly improved the speed of MCMC sampling for Bayesian nonparametric models with a dCRP distribution by not sampling parameters for empty clusters;\nadded experimental faster MCMC configuration, available by setting nimbleOptions(oldConjugacyChecking = FALSE) and nimbleOptions(useNewConfigureMCMC = TRUE);\nremoved compareMCMCs() and MCMCsuite(), which will be provided in a separate package — see https://github.com/nimble-dev/compareMCMCs; and\nimproved warning and error messages for MCEM and slice sampling.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMarch 12, 2019: We’ve released Version 0.7.1\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.7.1 is primarily a maintenance release with a couple important bug fixes, but also provides a bit of additional functionality.\nNew features and bug fixes include:\n\nfixing a bug in MCMC sampling of dCRP nodes in non-conjugate situations that was introduced in Version 0.7.0;\navoiding a protection stack overflow in working with large models, also introduced in Version 0.7.0;\nsupport for 6-dimensional arrays in model code and nimbleFunctions;\nrecognition of normal-normal conjugacy in multivariate regression structures.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nFebruary 5, 2019: We’ve released Version 0.7.0 (essentially the same as Version 0.6.13)\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.7.0 is a slight (and rapid) update to Version 0.6.13. Together they provide a variety of new features, as well as various bug fixes.\nNew features and bug fixes include:\n\ngreatly improved efficiency of sampling for Bayesian nonparametric (BNP) mixture models that use the dCRP (Chinese Restaurant process) distribution;\naddition of the double exponential (Laplace) distribution for use in models and nimbleFunctions;\na new “RW_wishart” MCMC sampler, for sampling non-conjugate Wishart and inverse-Wishart nodes;\nhandling of the normal-inverse gamma conjugacy for BNP mixture models using the dCRP distribution;\nenhanced functionality of the getSamplesDPmeasure function for posterior sampling from BNP random measures with Dirichlet process priors.\nhandling of five-dimensional arrays in models;\nfixing a bug producing incorrect WAIC calculations when using multiple chains for models with at least one non-scalar monitored variable;\nfixing a bug in conjugate samplers for CRP distribution: CRP_conjugate_dgamma_dnorm, CRP_conjugate_dbeta_dbin, CRP_conjugate_dbeta_dnegbin, CRP_conjugate_dgamma_dinvgamma, CRP_conjugate_ddirch_dmulti;\nenhanced warning messages; and\nan HTML version of the NIMBLE manual.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 27, 2018: We’ve released Version 0.6-12\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.6-12 is primarily a maintenance release with a variety of bug fixes.\nChanges include:\n\nfix the bootstrap particle filter to correctly calculate weights when particles are not resampled (the filter had been omitting the previous weights when calculating the new weights);\nadd an option to print MCMC samplers of a particular type;\navoid an overly-aggressive check for ragged arrays when building models;\navoid assigning a sampler to non-conjugacy inverse-Wishart nodes (thereby matching our handling of Wishart nodes);\nand a variety of bug fixes and internal changes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 14, 2018: We’ve released Version 0.6-11\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.6-11 has new features, notably support for Bayesian nonparametric mixture modeling, as well as a variety of bug fixes.\nChanges include:\n\nsupport for Bayesian nonparametric mixture modeling using Dirichlet process mixtures, with specialized MCMC samplers automatically assigned in NIMBLE’s default MCMC (See Chapter 10 of the manual for details);\nadditional resampling methods available with the auxiliary and bootstrap particle filters;\nuser-defined filtering algorithms can be used with NIMBLE’s particle MCMC samplers;\nMCMC thinning intervals can be modified at MCMC run-time;\nboth runMCMC() and nimbleMCMC() now drop burn-in samples before thinning, making their behavior consistent with each other;\nincreased functionality for the ‘setSeed’ argument in nimbleMCMC() and runMCMC();\nnew functionality for specifying the order in which sampler functions are executed in an MCMC;\ninvalid dynamic indexes now result in a warning and NaN values but do not cause execution to error out, allowing MCMC sampling to continue; and\nand a variety of bug fixes and improved error trapping/messages.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMarch 26, 2018: We’ve released Version 0.6-10\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.6-10 is primarily a maintenance release with various bug fixes and internal changes to speed up model and algorithm building and compilation.\nChanges include:\n\nsome steps of model and algorithm building and compilation are faster;\ncompiled execution with multivariate distributions or function arguments may be faster;\ndata can now be provided as a numeric data frame rather than a matrix;\nto run WAIC, a user now must set ‘enableWAIC’ to TRUE, either in NIMBLE’s options or as an argument to buildMCMC();\nif ‘enableWAIC’ is TRUE, buildMCMC() will now check to make sure that the nodes monitored by the MCMC algorithm will lead to a valid WAIC calculation; and\nthe use of identityMatrix() is deprecated in favor of diag().\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nFebruary 9, 2018: We’ve released Version 0.6-9\nWe’ve released the newest version of NIMBLE on CRAN and on our website. Version 0.6-9 is primarily a maintenance release with various bug fixes and fixes for CRAN packaging issues.\nNew features include:\n\ndimensions in a model will now be determined from either ‘inits’ or ‘data’ if not otherwise available;\none can now specify “nBootReps = NA” in the runCrossValidate() function, which will prevent the Monte Carlo error from being calculated;\nrunCrossValidate() now returns the averaged loss over all k folds, instead of the summed loss;\nwe’ve added the besselK function to the NIMBLE language; and\nand a variety of bug fixes.\n\nPlease see the NEWS file in the installed package for more details\n\n\nNovember 24, 2017: We’ve released Version 0.6-8\n(Note that version 0.6-7 was the version on CRAN for about a week. Version 0.6-8 is essentially identical to version 0.6-7 but contains a minor fix to resolve a CRAN packaging issue.)\nVersion 0.6-8 has a few new features.\nChanges as of Version 0.6-8 include:\n\nthe proper Gaussian CAR (conditional autoregressive) model can now be used in BUGS code as dcar_proper, which behaves similarly to BUGS’ car.proper distribution;\na new nimbleMCMC function that provides one-line invocation of NIMBLE’s MCMC engine, akin to usage of JAGS and WinBUGS through R;\na new runCrossValidate function that will conduct k-fold cross-validation of NIMBLE models fit by MCMC;\ndynamic indexing in BUGS code is now allowed by default;\nand a variety of bug fixes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJuly 29, 2017: We’ve released Version 0.6-6\nVersion 0.6-6 has many new features.\nChanges as of Version 0.6-6 include:\n\ndynamic indexes are now allowed in BUGS code — indexes of a variable no longer need to be constants but can be other nodes or functions of other nodes; for this release this is a beta feature that needs to be enabled with nimbleOptions(allowDynamicIndexing = TRUE);\nthe intrinsic Gaussian CAR (conditional autoregressive) model can now be used in BUGS code as dcar_normal, which behaves similarly to BUGS’ car.normal distribution;\noptim is now part of the NIMBLE language and can be used in nimbleFunctions;\nthe WAIC model selection criterion can be calculated using the calculateWAIC method for MCMC objects;\nit is possible to call out to external compiled code or back to R functions from a nimbleFunction using nimbleExternalCall and nimbleRcall (this is an experimental feature);\nthe bootstrap and auxiliary particle filters can now return their ESS values;\nand a variety of bug fixes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nJune 7, 2017: We’ve released Version 0.6-5\nVersion 0.6-5 is a minor release that primarily fixes some bugs and addresses some issues with packaging for CRAN. However, there are some new capabilities in this version.\nChanges as of Version 0.6-5 include:\n\nnimbleLists can now also be used in nimbleFunctions without setup code;\nbuildMCEM() can now estimate the asymptotic covariance of the model parameter estimates;\nvarious additional R-style functions (c(), rep(), seq(), diag() and ‘:’) can now be used in BUGS code;\nnew (improper) distributions, dflat and dhalfflat, are now available;\nan inverse-Wishart distribution is now available;\nand a variety of bug fixes and better error trapping.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nApril 25, 2017: We’ve released Version 0.6-4\nVersion 0.6-4 has many new features.\nChanges as of Version 0.6-4 include:\n\naddition of the functions c(), seq(), rep(), :, diag(), dim(), and which() for use in the NIMBLE language (i.e., run code) — usage generally mimics usage in R;\na complete reorganization of the User Manual, with the goal of clarifying how one can write nimbleFunctions to program with models;\naddition of the adaptive factor slice sampler, which can improve MCMC sampling for correlated blocks of parameters;\naddition of a new sampler that can handle non-conjugate Dirichlet settings;\naddition of a nimbleList data structure that behaves like R lists for use in nimbleFunctions;\naddition of eigendecomposition and SVD functions for use in the NIMBLE language;\nadditional flexibility in providing initial values for numeric(), logical(), integer(), matrix(), and array();\nlogical vectors and operators can now be used in the NIMBLE language;\nindexing of vectors and matrices can now use arbitrary numeric and logical vectors;\none can now index a vector of node names provided to values(), and more general indexing of node names in calculate(), simulate(), calculateDiff() and getLogProb();\naddition of the inverse-gamma distribution;\nuse of recycling for distribution functions used in the NIMBLE language;\nenhanced MCMC configuration functionality;\nusers can specify a user-defined BUGS distribution by simply providing a user-defined ‘d’ function without an ‘r’ function for use when an algorithm doesn’t need the ‘r’ function;\nand a variety of bug fixes, speedups, and better error trapping and checking.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nDecember 15, 2016: We’ve released Version 0.6-3\nVersion 0.6-3 is a very minor release primarily intended to address some CRAN packaging issues that do not affect users.\nWe also fixed a bug involving MCEM functionality and a bug that prevented use of the sd() and var() functions in BUGS code.\nFor most users, there is probably no need to upgrade from version 0.6-2.\n\n\nNovember 23, 2016: We’ve released Version 0.6-2\nVersion 0.6-2 is a minor release with a variety of useful functionality for users.\nChanges as of Version 0.6-2 include:\n\nuser-defined distributions can be used in BUGS code without needing to call the registerDistributions() function (unless one wants to specify alternative parameterizations, distribution range or that the distribution is discrete),\nusers can now specify the use of conjugate (Gibbs) samplers for nodes in a model,\nNIMBLE will now check the run code of nimbleFunctions for functions (in particular R functions) that are not part of the DSL and will not compile,\nadded getBound() functionality to find the lower and upper bounds of a node either from R or in DSL code,\nadded functionality to get distributional information about a node in a model or information about a distribution based on the name of the density function; these may be useful in setup code for algorithms,\nmultinomial and categorical distributions now allow ‘probs’ arguments that do not sum to one (these will be internally normalized) and\na variety of bug fixes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nOctober 17, 2016: We’ve released Version 0.6-1\n(Note that version 0.6 has been on CRAN for about a month and contains essentially the same features as version 0.6-1. The reason for skipping a version number here on the website is because of some internal packaging issues we need to resolve with CRAN.)\nVersion 0.6-1 is a major release, with many of the changes focused on our internal implementation, some of which should speed building and compiling models and algorithms.\nChanges as of Version 0.6-1 include:\n\nincreased speed and reduced memory use in building and models, as well as compiling nimbleFunctions,\nenhanced MCMC functionality including a new runMCMC function for easily running multiple chains, a new multinomial random walk sampler, the ability to time each sampler in an MCMC, and a progress bar,\nthe addition of the ability to handle syntax such as model$calculate(nodes[i]) in the DSL,\na variety of changes to clean up our compilation system to comply with CRAN rules (including that NIMBLE should now work with gcc on Solaris), and\na variety of other items.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMay 27, 2016: We’ve released Version 0.5-1\nVersion 0.5-1 is officially a minor release, but it actually has quite a bit in it, in particular the addition/improvement of a number of our algorithms. In addition there are some more improvements in our speed in building and compiling models and algorithms.\nChanges as of Version 0.5-1 include:\n\nthe addition of a variety of sequential Monte Carlo (aka particle filtering) algorithms, including particle MCMC samplers for use within an MCMC,\na greatly improved MCEM algorithm with an automated convergence and stopping criterion,\nnew syntax for declaring multivariate variables in the NIMBLE DSL, namely numeric(), integer(), matrix(), and array(), with declare() now deprecated,\naddition of the multivariate-t distribution for use in BUGS and DSL code,\na new binary MCMC sampler for discrete 0/1 nodes,\naddition of functionality to our random walk sampler to allow sampling on the log scale and use of reflection,\nmore flexible use of forwardsolve(), backsolve(), and solve(), including use in BUGS code, and\na variety of other items.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nApril 7, 2016: We’ve released Version 0.5\nVersion 0.5 is a major release. It is faster, uses less memory, and provides better syntax.\nChanges as of Version 0.5 include:\n\nmore efficient computations for conjugate sampling,\nadditional automated checking of BUGS syntax to improve NIMBLE’s warning/error messages,\nnew DSL (nimbleFunction programming) functionality to allow the use of syntax such as model$calculate(), etc. (syntax such as calculate(model) still works),\nnew functionality for MCMC sampler specification,\nimprovements in speed and memory use in building models,\naddition of forwardsolve, backsolve, and solve to the NIMBLE DSL, and\na variety of other items.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nOctober 4, 2015: We’ve released Version 0.4-1\nVersion 0.4-1 is a minor release. It fixes some logistical issues and adds a small amount of MCMC-related functionality.\nChanges as of Version 0.4-1 include:\n\nadded an elliptical slice sampler to the MCMC engine\nfixed bug preventing use of nimbleFunctions in packages depending on NIMBLE\nreduced C++ compiler warnings on Windows during use of compileNimble.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nAugust 2, 2015: We’ve released Version 0.4\nVersion 0.4 is a major release. We’ve added a number of user-level features and sped up most of the steps of building and compiling models and algorithms in the system.\nChanges as of Version 0.4 include:\n\nadded support for user-defined functions in BUGS code\nadded support for user-defined distributions in BUGS code\nadded support for truncated distributions, censoring, and general constraints in BUGS code\nnearly all calls to DSL functions or other nimbleFunctions handle R-style named or ordered arguments\nimproved handling of distribution functions in nimbleFunction run code and as deterministic functions in BUGS code\nadded an optional check when building model that alerts user to presence of nodes without values and log probability calculations that return NA\nadded calculateDiff as a fourth fundamental method (in addition to calculate, simulate, and getLogProb)\nadded flexibility and better organized return values of functions that specify MCMC samplers\nincorporated automated blocking into MCMC engine\nimproved a number of error messages to provide more useful diagnostic information\na variety of bug fixes\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nMarch 7, 2015: We’ve released Version 0.3-1\nChanges as of Version 0.3-1 include:\n\naddition of Dirichlet-multinomial conjugate sampling to the NIMBLE MCMC implementation\nhandling of arrays up to and including four dimensions\nnimbleModel() now allows data and constants to be provided together as the ‘constants’ argument\na variety of bug fixes\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nDecember 31, 2014: We’ve released Version 0.3\nChanges as of Version 0.3 include:\nImportant user-level syntax changes for creating and compiling models and algorithms that in some cases are not backwards compatible:\n\nnimbleFunctions are run via myNimbleFunction$run() instead of myNimbleFunction(). This means code written in v0.2 and earlier will not run without adding $run.\nWriting code for nimble models is now done with nimbleCode() (previously modelCode() ).\nTo customize MCMC use “myMCMCspec &lt;- configureMCMC(myModel)” (previously MCMCspec() ).\nTo build an MCMC algorithm, use either “myGenericMCMC &lt;- buildMCMC(myModel)” for a generic build or “myCustomizedMCMC &lt;- buildMCMC(myMCMCspec)” for a customized MCMC algorithm (previously one always had to build an MCMCspec, even for a generic build).\nVariables and methods of a nimbleFunction can be accessed by “myNimbleFunction\\(myVariable\" or \"myNimbleFunction\\)myMethod()” rather than “nfVar(myNimbleFunction, ‘myVariable’)” or “nfMethod(myNimbleFunction, ‘myMethod’)()”. Similarly, names of objects/methods of a nimble function can be queried by “ls(myNimbleFunction)”.\n\nIn addition:\n\nInternal changes to decrease compilation time, notably when compiling MCMC algorithms.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information.\n\n\nOctober, 2014: We’ve released Version 0.2\nChanges as of Version 0.2 include:\n\nInternal changes to decrease time to build models and nimbleFunctions.\nMultivariate conjugate updaters for the multivariate normal and Wishart are now included in our MCMC implementation, as well as block updating on multivariate nodes.\nAn extensive suite of tests of NIMBLE’s math functions, model building, and default MCMC.\nA number of bug fixes.\n\nPlease see the NEWS file in the source package or the nimble-dev GitHub site for more detailed information."
  },
  {
    "objectID": "blog/version-0-4-released.html",
    "href": "blog/version-0-4-released.html",
    "title": "Version 0.4 released!",
    "section": "",
    "text": "In late July we released a major new version of NIMBLE, 0.4. Ok, that’s still a low version number, indicating we have a lot we still want to build and improve, but this version can do a lot and is a huge step forward from 0.3. Almost everything runs faster, from model building to model and nimbleFunction compiling to compiled execution. New features include the ability to write your own functions and distributions for BUGS (as nimbleFunctions, of course) and an algorithm that automatically adapts blocks of correlated parameters for efficient joint sampling in MCMC. Read NEWS (link here) for more details. The same information is also on github (here)."
  },
  {
    "objectID": "blog/version-0-12-2-of-nimble-released-including-an-important-bug-fix-for-some-models-using-bayesian-nonparametrics-with-the-dcrp-distribution.html",
    "href": "blog/version-0-12-2-of-nimble-released-including-an-important-bug-fix-for-some-models-using-bayesian-nonparametrics-with-the-dcrp-distribution.html",
    "title": "Version 0.12.2 of NIMBLE released, including an important bug fix for some models using Bayesian nonparametrics with the dCRP distribution",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.12.2 is a bug fix release. In particular, this release fixes a bug in our Bayesian nonparametric distribution (BNP) functionality that gives incorrect MCMC results for some models, specifically when using the dCRP distribution when the parameters of the mixture components (i.e., the clusters) have hyperparameters (i.e., the base measure parameters) that are unknown and sampled during the MCMC. Here is an example basic model structure that is affected by the bug:\nk[1:n] ~ dCRP(alpha, n)\nfor(i in 1:n) {\n  y[i] ~ dnorm(mu[k[i]], 1)\n  mu[i] ~ dnorm(mu0, 1) ## mixture component parameters with hyperparameter\n}\nmu0 ~ dnorm(0, 1) ## unknown cluster hyperparameter\n(There is no problem without the hyperparameter layer – i.e., if mu0 is a fixed value – which is the situation in many models.)\nWe strongly encourage users using models with this type of structure to rerun their analyses, and we apologize for this issue.\nOther changes in this release include:\n\nFixing an issue with reversible jump variable selection under a similar situation to the BNP issue discussed above (in particular where there are unknown hyperparameters of the regression coefficients being considered, which would likely be an unusual use case).\nFixing a bug preventing setup of conjugate samplers for dwishart or dinvwishart nodes when using dynamic indexing.\nFixing a bug preventing use of truncation bounds specified via data or constants.\nFixing a bug preventing MCMC sampling with the LKJ prior for 2×2 matrices.\nFixing a bug in runCrossValidate affecting extraction of multivariate nodes.\nFixing a bug producing incorrect subset assignment into logical vectors in nimbleFunction code.\nFixing a bug preventing use of nimbleExternalCall with a constant expression.\nFixing a bug preventing use of recursion in nimbleFunctions without setup code.\n\nPlease see the release notes on our website for more details.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/nimble-virtual-short-course-may-26-28.html",
    "href": "blog/nimble-virtual-short-course-may-26-28.html",
    "title": "NIMBLE virtual short course, May 26-28",
    "section": "",
    "text": "We’ll be holding a virtual training workshop on NIMBLE, May 26-28, from 8 am to 1 pm US Pacific (California) time each day. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nThe workshop will roughly follow the material covered in our June 2020 virtual training, in particular:\n\nthe basic concepts and workflows for using NIMBLE and converting BUGS or JAGS models to work in NIMBLE.\noverview of different MCMC sampling strategies and how to use them in NIMBLE.\nwriting new distributions and functions for more flexible modeling and more efficient computation.\ntips and tricks for improving computational efficiency.\nusing advanced model components, including Bayesian non-parametric distributions (based on Dirichlet process priors), conditional auto-regressive (CAR) models for spatially correlated random fields, and reversible jump samplers for variable selection.\nan introduction to programming new algorithms in NIMBLE.\ncalling R and compiled C++ code from compiled NIMBLE models or functions.\n\nIf participant interests vary sufficiently, the third session will be split into two tracks. One of these will likely focus on ecological models. The other will be chosen based on attendee interest from topics such as (a) advanced NIMBLE programming including writing new MCMC samplers, (b) advanced spatial or Bayesian non-parametric modeling, or (c) non-MCMC algorithms in NIMBLE, such as sequential Monte Carlo.\nIf you are interested in attending, please pre-register at https://forms.gle/6AtNgfdUdvhni32Q6. This will hold a spot for you and allow us to learn about your specific interests. No payment is necessary to pre-register. Fees to finalize registration will be $100 (regular) or $50 (student). We will offer a process for students to request a fee waiver.\nThe workshop will assume attendees have a basic understanding of hierarchical/Bayesian models and MCMC, the BUGS (or JAGS) model language, and some familiarity with R."
  },
  {
    "objectID": "blog/version-0-9-1-of-nimble-released.html",
    "href": "blog/version-0-9-1-of-nimble-released.html",
    "title": "Version 0.9.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC). Version 0.9.1 is primarily a bug fix release but also provides some minor improvements in functionality.\nUsers of NIMBLE in R 4.0 on Windows MUST upgrade to this release for NIMBLE to work.\nNew features and bug fixes include:\n\nswitched to use of system2() from system() to avoid an issue on Windows in R 4.0;\nmodified various adaptive MCMC samplers so the exponent controlling the scale decay of the adaptation is adjustable by user;\nallowed pmin() and pmax() to be used in models;\nimproved handling of NA values in the dCRP distribution; and\nimproved handling of cases where indexing goes beyond the extent of a variable in expandNodeNames() and related queries of model structure.\n\nPlease see the release notes on our website for more details."
  },
  {
    "objectID": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html",
    "href": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html",
    "title": "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE",
    "section": "",
    "text": "(Prepared by Chris Paciorek and Sally Paganin.)\nOnce one has samples from an MCMC, one often wants to do some post hoc manipulation of the samples. An important example is posterior predictive sampling, which is needed for posterior predictive checking.\nWith posterior predictive sampling, we need to simulate new data values, once for each posterior sample. These samples can then be compared with the actual data as a model check.\nIn this example, we’ll follow the posterior predictive checking done in the Gelman et al. Bayesian Data Analysis book, using Newcomb’s speed of light measurements (Section 6.3).",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE"
    ]
  },
  {
    "objectID": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html#posterior-predictive-sampling-using-a-loop-in-r",
    "href": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html#posterior-predictive-sampling-using-a-loop-in-r",
    "title": "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE",
    "section": "Posterior predictive sampling using a loop in R",
    "text": "Posterior predictive sampling using a loop in R\nSimon Newcomb made 66 measurements of the speed of light, which one might model using a normal distribution. One question discussed in Gelman et al. is whether the lowest measurements, which look like outliers, could have reasonably come from a normal distribution.\n\nSetup\nWe set up the nimble model.\nlibrary(nimble, warn.conflicts = FALSE)\n\ncode &lt;- nimbleCode({\n    ## noninformative priors\n    mu ~ dflat()\n    sigma ~ dhalfflat()\n    ## likelihood\n    for(i in 1:n) {\n        y[i] ~ dnorm(mu, sd = sigma)\n    }\n})\n\ndata &lt;- list(y = MASS::newcomb)\ninits &lt;- list(mu = 0, sigma = 5)\nconstants &lt;- list(n = length(data$y))\n\nmodel &lt;- nimbleModel(code = code, data = data, constants = constants, inits = inits)\n\n\n\n## defining model...\n\n\n\n## building model...\n\n\n\n## setting data and initial values...\n\n\n\n## running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... \n## checking model sizes and dimensions...\n## model building finished.\nNext we’ll create some vectors of node names that will be useful for our manipulations.\n## Ensure we have the nodes needed to simulate new datasets\ndataNodes &lt;- model$getNodeNames(dataOnly = TRUE)\nparentNodes &lt;- model$getParents(dataNodes, stochOnly = TRUE)  # `getParents` is new in nimble 0.11.0\n## Ensure we have both data nodes and deterministic intermediates (e.g., lifted nodes)\nsimNodes &lt;- model$getDependencies(parentNodes, self = FALSE)\nNow run the MCMC.\ncmodel  &lt;- compileNimble(model)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\n\n## compilation finished.\n\n\n\nmcmc    &lt;- buildMCMC(model, monitors = parentNodes)\n\n\n\n## ===== Monitors =====\n## thin = 1: mu, sigma\n## ===== Samplers =====\n## conjugate sampler (2)\n##   - mu\n##   - sigma\n\n\n\ncmcmc   &lt;- compileNimble(mcmc, project = model)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n## compilation finished.\n\n\n\nsamples &lt;- runMCMC(cmcmc, niter = 1000, nburnin = 500)\n\n\n\n## running chain 1...\n\n\n\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n\n\nPosterior predictive sampling by direct variable assignment\nWe’ll loop over the samples and use the compiled model (uncompiled would be ok too, but slower) to simulate new datasets.\nnSamp &lt;- nrow(samples)\nn &lt;- length(data$y)\nppSamples &lt;- matrix(0, nSamp, n)\n\nset.seed(1)\nfor(i in 1:nSamp){\n  cmodel[[\"mu\"]] &lt;- samples[i, \"mu\"]             ## or cmodel$mu &lt;- samples[i, \"mu\"]\n  cmodel[[\"sigma\"]] &lt;- samples[i, \"sigma\"]\n  cmodel$simulate(simNodes, includeData = TRUE)\n  ppSamples[i, ] &lt;- cmodel[[\"y\"]]\n}\n\n\nPosterior predictive sampling using values\nThat’s fine, but we needed to manually insert values for the different variables. For a more general solution, we can use nimble’s values function as follows.\nppSamples &lt;- matrix(0, nrow = nSamp, ncol =\n          length(model$expandNodeNames(dataNodes, returnScalarComponents = TRUE)))\npostNames &lt;- colnames(samples)\n\nset.seed(1)\nsystem.time({\nfor(i in seq_len(nSamp)) {\n    values(cmodel, postNames) &lt;- samples[i, ]  # assign 'flattened' values\n    cmodel$simulate(simNodes, includeData = TRUE)\n    ppSamples[i, ] &lt;- values(cmodel, dataNodes)\n}\n})\n\n\n\n##    user  system elapsed \n##   4.657   0.000   4.656\nSide note: For large models, it might be faster to use the variable names as the second argument to values() rather than the names of all the elements of the variables. If one chooses to do this, it’s important to check that the ordering of variables in the ‘flattened’ values in samples is the same as the ordering of variables in the second argument to values so that the first line of the for loop assigns the values from samples correctly into the model.\n\n\nDoing the posterior predictive check\nAt this point, we can implement the check we want using our chosen discrepancy measure. Here a simple check uses the minimum observation.\nobsMin &lt;- min(data$y)\nppMin &lt;- apply(ppSamples, 1, min)\n\n# ## Check with plot in Gelman et al. (3rd edition), Figure 6.3\nhist(ppMin, xlim = c(-50, 20),\n    main = \"Discrepancy = min(y)\",\n    xlab = \"min(y_rep)\")\nabline(v = obsMin, col = 'red')",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE"
    ]
  },
  {
    "objectID": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html#fast-posterior-predictive-sampling-using-a-nimblefunction",
    "href": "blog/posterior-predictive-sampling-and-other-post-mcmc-use-of-samples-in-nimble.html#fast-posterior-predictive-sampling-using-a-nimblefunction",
    "title": "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE",
    "section": "Fast posterior predictive sampling using a nimbleFunction",
    "text": "Fast posterior predictive sampling using a nimbleFunction\nThe approach above could be slow, even with a compiled model, because the loop is carried out in R. We could instead do all the work in a compiled nimbleFunction.\n\nWriting the nimbleFunction\nLet’s set up a nimbleFunction. In the setup code, we’ll manipulate the nodes and variables, similarly to the code above. In the run code, we’ll loop through the samples and simulate, also similarly.\nRemember that all querying of the model structure needs to happen in the setup code. We also need to pass the MCMC object to the nimble function, so that we can determine at setup time the names of the variables we are copying from the posterior samples into the model.\nThe run code takes the actual samples as the input argument, so the nimbleFunction will work regardless of how long the MCMC was run for.\nppSamplerNF &lt;- nimbleFunction(\n          setup = function(model, mcmc) {\n              dataNodes &lt;- model$getNodeNames(dataOnly = TRUE)\n              parentNodes &lt;- model$getParents(dataNodes, stochOnly = TRUE)\n              cat(\"Stochastic parents of data are:\", paste(parentNodes, collapse = ','), \".\\n\")\n              simNodes &lt;- model$getDependencies(parentNodes, self = FALSE)\n              vars &lt;- mcmc$mvSamples$getVarNames()  # need ordering of variables in mvSamples / samples matrix\n              cat(\"Using posterior samples of:\", paste(vars, collapse = ','), \".\\n\")\n              n &lt;- length(model$expandNodeNames(dataNodes, returnScalarComponents = TRUE))\n          },\n          run = function(samples = double(2)) {\n              nSamp &lt;- dim(samples)[1]\n              ppSamples &lt;- matrix(nrow = nSamp, ncol = n)\n              for(i in 1:nSamp) {\n                    values(model, vars) &lt;&lt;- samples[i, ]\n                    model$simulate(simNodes, includeData = TRUE)\n                    ppSamples[i, ] &lt;- values(model, dataNodes)\n              }\n              returnType(double(2))\n              return(ppSamples)\n          })\n\n\nUsing the nimbleFunction\nWe’ll create the instance of the nimbleFunction for this model and MCMC.\nThen we run the compiled nimbleFunction.\n## Create the sampler for this model and this MCMC.\nppSampler &lt;- ppSamplerNF(model, mcmc)\n\n\n\n## Stochastic parents of data are: mu,sigma .\n## Using posterior samples of: mu,sigma .\n\n\n\ncppSampler &lt;- compileNimble(ppSampler, project = model)\n\n\n\n## compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\n\n## compilation finished.\n\n\n\n## Check ordering of variables is same in 'vars' and in 'samples'.\ncolnames(samples)\n\n\n\n## [1] \"mu\"    \"sigma\"\n\n\n\nidentical(colnames(samples), model$expandNodeNames(mcmc$mvSamples$getVarNames()))\n\n\n\n## [1] TRUE\n\n\n\nset.seed(1)\nsystem.time(ppSamples_via_nf &lt;- cppSampler$run(samples))\n\n\n\n##    user  system elapsed \n##   0.004   0.000   0.004\n\n\n\nidentical(ppSamples, ppSamples_via_nf)\n\n\n\n## [1] TRUE\nSo we get exactly the same results (note the use of set.seed to ensure this) but much faster.\nHere the speed doesn’t really matter but for more samples and larger models it often will, even after accounting for the time spent to compile the nimbleFunction.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Posterior predictive sampling and other post-MCMC use of samples in NIMBLE"
    ]
  },
  {
    "objectID": "blog/version-0-13-0-of-nimble-released.html",
    "href": "blog/version-0-13-0-of-nimble-released.html",
    "title": "Version 0.13.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.13.0 provides new functionality (in particular improved handling of predictive nodes in MCMC) and minor bug fixes, including:\n\nThoroughly revamping handling of posterior predictive nodes in the MCMC system, in particular that MCMC samplers, by default, will now exclude predictive dependencies from internal sampler calculations. This should improve MCMC mixing for models with predictive nodes. Posterior predictive nodes are now sampled conditional on all other model nodes at the end of each MCMC iteration.\nAdding functionality to the MCMC configuration system, including a new replaceSamplers method and updates to the arguments for the addSamplers method.\nAdding an option to the WAIC system to allow additional burnin (in addition to standard MCMC burnin) before calculating online WAIC, thereby allowing inspection of initial samples without forcing them to be used for WAIC.\nWarning users of unused constants during model building.\nFixing bugs that prevented use of variables starting with ‘logProb’ or named ‘i’ in model code.\nFixing a bug to prevent infinite recursion in particular cases in conjugacy checking.\nFixing a bug in simulating from dcar_normal nodes when multiple nodes passed to simulate.\n\nPlease see the release notes on our website for more details.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/version-1-0-1-of-nimble-released-fixing-a-bug-in-version-1-0-0-affecting-certain-models.html",
    "href": "blog/version-1-0-1-of-nimble-released-fixing-a-bug-in-version-1-0-0-affecting-certain-models.html",
    "title": "Version 1.0.1 of NIMBLE released, fixing a bug in version 1.0.0 affecting certain models",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 1.0.1 follows shortly after 1.0.0 and fixes an issue and a bug introduced in version 1.0.0 causing data to be set incorrectly in certain models.\nBoth cases occur only when a variable (e.g., “x”) contains both stochastic nodes (e.g. “x[2] ~ ”) and either deterministic nodes (e.g. “x[3] &lt;- ”) or right-hand-side-only nodes (e.g. “x[4]” appears only on the right-hand-side, like an explanatory value).\nThe issue involves a change of behavior (relative to previous nimble versions) when both setting data values for some nodes and initial values for other nodes within the same variable (that satisfies the previous condition). Data values for right-hand-side-only nodes were replaced by initial values (inits) if both were provided. Version 1.0.1 reverts to previous behavior that data values are not replaced by initial values in that situation.\nThe bug involves models where (for a variable satisfying the previous condition) not every scalar element within the variable is used as a node and some of the nodes in the variable are data. In that situation, data values may be set incorrectly. This could typically occur in models with autoregressive structure directly on some data nodes (such as may be the case for capture-recapture models involving many individual capture histories within the same variable, indexed by individual and time, with some individuals not present for the entire time series, resulting in unused scalar elements of the variable).\nPlease see the release notes on our website for more details."
  },
  {
    "objectID": "blog/nimble-virtual-short-course-january-4-6-2023.html",
    "href": "blog/nimble-virtual-short-course-january-4-6-2023.html",
    "title": "NIMBLE virtual short course, January 4-6, 2023",
    "section": "",
    "text": "We’ll be holding a virtual training workshop on NIMBLE, January 4-6, 2023 from 8 am to 1 pm US Pacific (California) time each day. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nRecently we added support for automatic differentiation (AD) to NIMBLE in a beta release, and the workshop will cover NIMBLE’s AD capabilities in detail.\nThe workshop will cover the following material:\n\nthe basic concepts and workflows for using NIMBLE and converting BUGS or JAGS models to work in NIMBLE.\noverview of different MCMC sampling strategies and how to use them in NIMBLE, including Hamiltonian Monte Carlo (HMC).\nwriting new distributions and functions for more flexible modeling and more efficient computation.\ntips and tricks for improving computational efficiency.\nusing advanced model components, including Bayesian non-parametric distributions (based on Dirichlet process priors), conditional auto-regressive (CAR) models for spatially correlated random fields, Laplace approximation, and reversible jump samplers for variable selection.\nan introduction to programming new algorithms in NIMBLE.\nuse of automatic differentiation (AD) in algorithms.\ncalling R and compiled C++ code from compiled NIMBLE models or functions.\n\nIf you are interested in attending, please pre-register. Registration fees will be $125 (regular) or $50 (student). We are also offering a process (see the pre-registration form) for students to request a fee waiver.\nThe workshop will assume attendees have a basic understanding of hierarchical/Bayesian models and MCMC, the BUGS (or JAGS) model language, and some familiarity with R.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/version-1-0-0-of-nimble-released.html",
    "href": "blog/version-1-0-0-of-nimble-released.html",
    "title": "Version 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 1.0.0 provides substantial new functionality. This includes:\n\nA Laplace approximation algorithm that allows one to find the MLE for model parameters based on approximating the marginal likelihood in models with continuous random effects/latent process values.\nA Hamiltonian Monte Carlo (HMC) MCMC sampler implementing the NUTS algorithm (available in the newly-released nimbleHMC package).\nSupport in NIMBLE’s algorithm programming system to obtain derivatives of functions and arbitrary calculations within models.\nA parameter transformation system allowing algorithms to work in unconstrained parameter spaces when model parameters have constrained domains.\n\nThese are documented via the R help system and a new section at the end of our User Manual. We’re excited for users to try out the new features and let us know of their experiences. In particular, given these major additions to the NIMBLE system, we anticipate the possibility of minor glitches. The best place to reach out for support is still the nimble-users list.\nIn addition to the new functionality above, other enhancements and bug fixes include:\n\nFixing a bug (previously reported in a nimble-users message) giving incorrect results in NIMBLE’s cross-validation function (runCrossValidate) for all but the ‘predictive’ loss function for NIMBLE versions 0.10.0 – 0.13.2.\nFixing a bug in conjugacy checking causing incorrect identification of conjugate relationships in models with unusual uses of subsets, supersets, and slices of multivariate normal nodes.\nImproving control of the addSampler method for MCMC.\nImproving the WAIC system in a few small ways.\nEnhancing error trapping and warning messages.\n\nPlease see the NEWS file in the package source for more details.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Version 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling"
    ]
  },
  {
    "objectID": "blog/registration-open-for-online-nimble-short-course-june-3-5-2020.html",
    "href": "blog/registration-open-for-online-nimble-short-course-june-3-5-2020.html",
    "title": "registration open for online NIMBLE short course, June 3-5, 2020",
    "section": "",
    "text": "Registration is now open for a three-day online training workshop on NIMBLE, June 3-5, 2020, 9 am – 2 pm California time (noon – 5 pm US EDT). This online workshop will be held in place of our previously planned in-person workshop.\nNIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nThe workshop will cover:\n\nthe basic concepts and workflows for using NIMBLE and converting BUGS or JAGS models to work in NIMBLE.\noverview of different MCMC sampling strategies and how to use them in NIMBLE.\nwriting new distributions and functions for more flexible modeling and more efficient computation.\ntips and tricks for improving computational efficiency.\nusing advanced model components, including Bayesian non-parametric distributions (based on Dirichlet process priors), conditional auto-regressive (CAR) models for spatially correlated random fields, and reversible jump samplers for variable selection.\nan introduction to programming new algorithms in NIMBLE.\ncalling R and compiled C++ code from compiled NIMBLE models or functions.\n\nIf participant interests vary sufficiently, part of the third day will be split into two tracks. One of these will likely focus on ecological models. The other will be chosen based on attendee interest from topics such as (a) advanced NIMBLE programming including writing new MCMC samplers, (b) advanced spatial or Bayesian non-parametric modeling, or (c) non-MCMC algorithms in NIMBLE such as sequential Monte Carlo. Prior to the workshop, we will survey attendee interests and adjust content to meet attendee interests.\nTo register, please go here: https://na.eventscloud.com/540175. Registration is $120 (regular) or $60 (grad student)."
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "",
    "text": "Prepared by Ben Goldstein.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#what-is-nimbleecology",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#what-is-nimbleecology",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "What is nimbleEcology?",
    "text": "What is nimbleEcology?\nnimbleEcology is an auxiliary nimble package for ecologists.\nnimbleEcology contains a set of distributions corresponding to some common ecological models. When the package is loaded, these distributions are registered to NIMBLE and can be used directly in models.\nnimbleEcology contains distributions often used in modeling abundance, occupancy and capture-recapture studies.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#why-use-nimbleecology",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#why-use-nimbleecology",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "Why use nimbleEcology?",
    "text": "Why use nimbleEcology?\nEcological models for abundance, occupancy and capture-recapture often involve many discrete latent states. Writing such models can be error-prone and in some cases can lead to slow MCMC mixing. We’ve put together a collection of distributions in nimble to make writing these models easier\n\nEasy to use. Using a nimbleEcology distribution is easier than writing out probabilities or hierarchical model descriptions.\nMinimize errors. You don’t have to lose hours looking for the misplaced minus sign; the distributions are checked and tested.\nIntegrate over latent states. nimbleEcology implementations integrate or sum likelihoods over latent states. This eliminates the need for sampling these latent variables, which in some cases can provide efficiency gains, and allows maximum likelihood (ML) estimation methods with hierarchical models.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#how-to-use",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#how-to-use",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "How to use",
    "text": "How to use\nnimbleEcology can be installed directly from CRAN as follows.\ninstall.packages(\"nimbleEcology\")\nOnce nimbleEcology is installed, load it using library. It will also load nimble.\nlibrary(nimbleEcology)\n\n\n\n## Loading required package: nimble\n\n\n\n## nimble version 0.10.0 is loaded.\n## For more information on NIMBLE and a User Manual,\n## please visit http://R-nimble.org.\n\n\n\n## \n## Attaching package: 'nimble'\n\n\n\n## The following object is masked from 'package:stats':\n## \n##     simulate\n\n\n\n## Loading nimbleEcology. \n## Registering the following user-defined functions: \n## dOcc, dDynOcc, dCJS, dHMM, dDHMM\nNote the message indicating which distribution families have been loaded.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#which-distributions-are-available",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#which-distributions-are-available",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "Which distributions are available?",
    "text": "Which distributions are available?\nThe following distributions are available in nimbleEcology.\n\ndOcc (occupancy model)\ndDynOcc (dynamic occupancy model)\ndHMM (hidden Markov model)\ndDHMM (dynamic hidden Markov model)\ndCJS (Cormack-Jolly-Seber or mark-recapture model)\ndNmixture (N-mixture model)\ndYourNewDistribution Do you have a custom distribution that would fit the package? Are we missing a distribution you need? Let us know! We actively encourage contributions through GitHub or direct communication.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#example-code",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#example-code",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "Example code",
    "text": "Example code\nThe following code illustrates a NIMBLE model definition for an occupancy model using nimbleEcology. The model is specified, built, and used to simulate some data according to the occupancy distribution.\nlibrary(nimbleEcology)\n\nocc_code &lt;- nimbleCode({\n  psi ~ dunif(0, 1)\n  p ~ dunif(0, 1)\n  for (s in 1:nsite) {\n    x[s, 1:nvisit] ~ dOcc_s(probOcc = psi, probDetect = p,\n                            len = nvisit)\n  }\n})\n\nocc_model &lt;- nimbleModel(occ_code,\n               constants = list(nsite = 10, nvisit = 5),\n               inits = list(psi = 0.5, p = 0.5))\n\n\n\n## defining model...\n\n\n\n## building model...\n\n\n\n## setting data and initial values...\n\n\n\n## running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... \n## checking model sizes and dimensions... This model is not fully initialized. This is not an error. To see which variables are not initialized, use model$initializeInfo(). For more information on model initialization, see help(modelInitialization).\n## model building finished.\n\n\n\nset.seed(94)\nocc_model$simulate(\"x\")\nocc_model$x\n\n\n\n##       [,1] [,2] [,3] [,4] [,5]\n##  [1,]    0    0    0    0    0\n##  [2,]    0    0    0    0    0\n##  [3,]    0    0    0    0    0\n##  [4,]    0    0    0    0    0\n##  [5,]    1    1    1    0    1\n##  [6,]    0    0    0    1    0\n##  [7,]    0    0    0    0    0\n##  [8,]    0    0    0    0    1\n##  [9,]    1    1    1    0    0\n## [10,]    0    1    0    0    0",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#how-to-learn-more",
    "href": "blog/nimbleecology-custom-nimble-distributions-for-ecologists.html#how-to-learn-more",
    "title": "nimbleEcology: custom NIMBLE distributions for ecologists",
    "section": "How to learn more",
    "text": "How to learn more\nOnce the package is installed, you can check out the package vignette with vignette(“nimbleEcology”).\nDocumentation is available for each distribution family using the R syntax ?distribution, for example\n?dHMM\nFor more detail on marginalization in these distributions, see the paper “One size does not fit all: Customizing MCMC methods for hierarchical models using NIMBLE” (Ponisio et al. 2020).",
    "crumbs": [
      "Home",
      "Blog Posts",
      "nimbleEcology: custom NIMBLE distributions for ecologists"
    ]
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Welcome to the NIMBLE blog! Here you’ll find announcements about new releases, tutorials, and insights into using NIMBLE for your statistical computing needs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nannouncing the nimbleMacros package and the use of macros in NIMBLE models\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 19, 2025\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.3.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 21, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.2.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJul 31, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.2.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJun 14, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.1.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nnimbleHMC version 0.2.0 released, providing improved HMC performance\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nSep 20, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.1 of NIMBLE released, fixing a bug in version 1.0.0 affecting certain models\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nMay 31, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.13.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 19, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nBug in newly-released version 0.13.0 affecting MCMC for models with predictive nodes\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 8, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.13.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nNov 29, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nWe’re looking for a programmer\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE virtual short course, January 4-6, 2023\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nSep 8, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nBeta version of NIMBLE with automatic differentiation, including HMC sampling and Laplace approximation\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nJul 15, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.12.2 of NIMBLE released, including an important bug fix for some models using Bayesian nonparametrics with the dCRP distribution\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 4, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE in-person short course, June 1-3, Lisbon, Portugal\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 2, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nA close look at some linear model MCMC comparisons\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nNov 11, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE online tutorial, November 18, 2021\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 20, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.12.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 13, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nPosterior predictive sampling and other post-MCMC use of samples in NIMBLE\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nAug 10, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.11.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJun 2, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.11.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nApr 24, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nBayesian Nonparametric Models in NIMBLE: General Multivariate Models\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 25, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE virtual short course, May 26-28\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 5, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE is hiring a programmer\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nFeb 2, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.10.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nNov 30, 2020\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.10.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 14, 2020\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.9.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nMay 27, 2020\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nnimbleEcology: custom NIMBLE distributions for ecologists\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nApr 18, 2020\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nregistration open for online NIMBLE short course, June 3-5, 2020\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nApr 6, 2020\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.6-6 of NIMBLE released!\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJul 29, 2017\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.4 released!\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nAug 31, 2015\n\n\nNIMBLE Development Team\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Blog Posts",
      "All Posts"
    ]
  },
  {
    "objectID": "blog/nimble-online-tutorial-november-18-2021.html",
    "href": "blog/nimble-online-tutorial-november-18-2021.html",
    "title": "NIMBLE online tutorial, November 18, 2021",
    "section": "",
    "text": "We’ll be giving a two-hour tutorial on NIMBLE, sponsored by the environmental Bayes (enviBayes) section of ISBA (The International Society for Bayesian Analysis), on Thursday November 18, from 11 am to 1 pm US Eastern time.\nNIMBLE (r-nimble.org) is a system for fitting and programming with hierarchical models in R that builds on (a new implementation of) the BUGS language for declaring models. NIMBLE provides analysts with a flexible system for using MCMC, sequential Monte Carlo, MCEM, and other techniques on user-specified models. It provides developers and methodologists with the ability to write algorithms in an R-like syntax that can be easily disseminated to users. C++ versions of models and algorithms are created for speed, but these are manipulated from R without any need for analysts or algorithm developers to program in C++. While analysts can use NIMBLE as a nearly drop-in replacement for WinBUGS or JAGS, NIMBLE provides enhanced functionality in a number of ways.\nYour avatar is your business card. Take high-quality, and better professional photos. Think over your style, add accessories hooksexup. In short, show yourself on the back side.\nThis workshop will demonstrate how one can use NIMBLE to:\n\nflexibly specify an MCMC for a specific model, including choosing samplers and blocking approaches (and noting the potential usefulness of this for teaching);\ntailor an MCMC to a specific model using user-defined distributions, user-defined functions, and vectorization;\nwrite your own MCMC sampling algorithms and use them in combination with samplers from NIMBLE’s library of samplers;\ndevelop and disseminate your own algorithms, building upon NIMBLE’s existing algorithms; and\nuse specialized model components such as Dirichlet processes, conditional auto-regressive (CAR) models, and reversible jump for variable selection.\n\nThe tutorial will assume working knowledge of hierarchical models and some familiarity with MCMC. Given the two-hour time frame, we’ll focus on demonstrating some of the key features of NIMBLE, without going into a lot of detail on any given topic.\nTo attend, please register here."
  },
  {
    "objectID": "blog/a-close-look-at-some-linear-model-mcmc-comparisons.html",
    "href": "blog/a-close-look-at-some-linear-model-mcmc-comparisons.html",
    "title": "A close look at some linear model MCMC comparisons",
    "section": "",
    "text": "This is our second blog post taking a careful look at some of the results posted in an arXiv manuscript by Beraha, Falco, and Guglielmi (BFG). They compare JAGS, Stan, and NIMBLE using four examples. In their results, each package performs best in at least one example.\nIn our previous post, we explained that they compared apples to oranges in the accelerated failure time (AFT) example. They gave Stan a different and easier problem than they gave JAGS and NIMBLE. When we gave NIMBLE the same problem, we saw that its MCMC performance was up to 45 times better than what they reported. We looked first at the AFT example because that’s where NIMBLE seemed to perform comparatively worst.\nOn my first real hike, I went to the Carpathians when I was less than 9 years old (already an adult :-), and my sister was 7 then. Some memories of this family trip have survived to this day. I remember how I overate blueberries on the slopes of Temnatik, how they ran wildly up and down the mountain, how they carried small backpacks (it seems that I had 9 kg, and my sister had 7. But I’m not sure in climbing with kids, how my father and I caught delicious trout, how they later roasted it in a cauldron, how they climbed to the top of Mount Stoj and walked among its domes. It’s strange, only a week of hiking, and so many pleasant memories for life…\nIn this post we’re looking at the simple linear model example. It turns out that the models were written more efficiently for Stan than for JAGS and NIMBLE , because matrix multiplication was used for Stan but all scalar steps of matrix multiplication were written in JAGS and NIMBLE. JAGS and NIMBLE do support matrix multiplication and inner products. When we modify the models to also use matrix multiplication, NIMBLE’s MCMC performance with default samplers increases often by 1.2 to 3-fold but sometimes by 5 to &gt;10-fold over what was reported by BFG, as far as we can tell. This had to do with both raw computational efficiency and also MCMC samplers invoked by different ways to write the model code. Other issues are described below.\nBFG’s linear model examples explore different data sizes (n = 30, 100, 1000, or in one case 2000), different numbers of explanatory variables (4, 16, 30, 50 or 100), and different priors for the variance and/or coefficients (beta[i]s), all in a simple linear model. The priors included:\n\n“LM-C”: an inverse gamma prior for variance, which is used for both residual variance and variance of normal priors for beta[i]s (regression coefficients). This setup should offer conjugate sampling for both the variance parameter and the beta[i]s.\n“LM-C Bin”: the same prior as “LM-C”. This case has Bernoulli- instead of normally-distributed explanatory variables in the data simulations. It’s very similar to “LM-C”.\n“LM-WI”: A weakly informative (“WI”) prior for residual standard deviation using a truncated, scaled t-distribution. beta[i]s have a non-informative (sd = 100) normal prior.\n“LM-NI”: A non-informative (“NI”) flat prior for residual standard deviation. beta[i]s have a non-informative (sd = 100) normal prior.\n“LM-L”: A lasso (“L”) prior for beta[i]s. This uses a double-exponential prior for beta[i]s, with a parameter that itself follows an exponential prior. This prior is a Bayesian analog of the lasso for variable selection, so the scenarios used for this have large numbers of explanatory variables, with different numbers of them (z) set to 0 in the simulations. Residual variance has an inverse gamma prior.\n\nAgain, we are going to stick to NIMBLE here and not try to reproduce or explore results for JAGS or Stan.\nIn more detail, the big issues that jumped out from BFG’s code are:\n\nStan was given matrix multiplication forX %*% beta, while NIMBLE and JAGS were given code to do all of the element-by-element steps of matrix multiplication. Both NIMBLE and JAGS support matrix multiplication and inner products, so we think it is better and more directly comparable to use these features.\nFor the “LM-C” and “LM-C Bin” cases, the prior for the beta[i]s was given as a multivariate normal with a diagonal covariance matrix. It is better (and equivalent) to give each element a univariate normal prior.\n\nThere are two reasons that writing out matrix multiplication as they did is not a great way to code a model. The first is that it is just inefficient. For X that is N-by-p and beta that is p-by-1, there are N*p scalar multiplications and N summations of length p in the model code. Although somewhere in the computer those elemental steps need to be taken, they will be substantially faster if not broken up by hand-coding them. When NIMBLE generates (and then compiles) C++, it generates C++ for the Eigen linear algebra library, which gives efficient implementations of matrix operations.\nThe second reason, however, may be more important in this case. Using either matrix multiplication or inner products makes it easier for NIMBLE to determine that the coefficients (“beta[i]”s) in many of these cases have conjugate relationships that can be used for Gibbs sampling. The way BFG wrote the model revealed to us that we’re not detecting the conjugacy in this case. That’s something we plan to fix, but it’s not a situation that’s come before us yet. Detecting conjugacy in a graphical model — as written in the BUGS/JAGS/NIMBLE dialects of the BUGS language — involves symbolic algebra, so it’s difficult to catch all cases.\nThe reasons it’s better to give a set of univariate normal priors than a single multivariate normal are similar. It’s more computationally efficient, and it makes it easier to detect conjugacy.\nIn summary, they wrote the model inefficiently for NIMBLE and differently between packages, and we didn’t detect conjugacy for the way they wrote it. In the results below, the “better” results use matrix multiplication directly (in all cases) and use univariate normal priors instead of a multivariate normal (in the “LM-C” and “LM-C Bin” cases).\nIt also turns out that neither JAGS nor NIMBLE detects conjugacy for the precision parameter of the “LM-C” and “LM-C Bin” cases. (This is shown by list.samplers in rjags and configureMCMC in NIMBLE.) In NIMBLE, a summary of how conjugacy is determined is in Table 7.1 of our User Manual. It can be obtained by changing sd = sigma to var = sigmasq in one line of BFG’s code. In these examples, we found that this issue doesn’t make much different to MCMC efficiency, so we leave it as they coded it.\nBefore giving our results, we’ll make a few observations on BFG’s results, shown in their Table 2. One is that JAGS gives very efficient sampling for many of these cases, and that’s something we’ve seen before. Especially when conjugate sampling is available, JAGS does well. Next is that Stan and NIMBLE each do better than the other in some cases. As we wrote about in the previous post, BFG chose not to calculate what we see as the most relevant metric for comparison. That is the rate of generating effectively independent samples, the ESS/time, which we call MCMC efficiency. An MCMC system can be efficient by slowly generating well-mixed samples or by rapidly generating poorly-mixed samples. One has to make choices such as whether burn-in (or warmup) time is counted in the denominator, depending on exactly what is of interest. BFG reported only ESS/recorded iterations and total iterations/time. The product of these is a measure of ESS/time, scaled by a ratio of total iterations / recorded iterations.\nFor example, in the “LM-C” case with “N = 1000, p = 4”, Stan has (ESS/recorded iterations) * (total iterations/time) = 0.99 * 157=155, while NIMBLE has 0.14 * 1571=220. Thus in this case NIMBLE is generating effectively independent samples faster than Stan, because the faster computation out-weighs the poorer mixing. In other cases, Stan has higher ESS/time than NIMBLE. When BFG round ESS/recorded iterations to “1%” in some cases, the ESS/time is unknown up to a factor of 3 because 1% could be rounded from 0.50 or from 1.49. For most cases, Stan and NIMBLE are within a factor of 2 of each other, which is close. One case where Stan really stands out is the non-informative prior (LM-NI) with p&gt;n, but it’s worth noting that this is a statistically unhealthy case. With p&gt;n, parameters are not identifiable without the help of a prior. In the LM-NI case, the prior is uninformative, and the posteriors for beta[i]s are not much different than their priors.\nOne other result jumps out as strange from their Table 2. The run-time results for “LM-WI” (total iterations / time) are much, much slower than in other cases. For example, with N = 100 and p = 4, this case was only 2.6% (294 vs 11,000 ) as fast as the corresponding “LM-C” case. We’re not sure how that could make sense, so it was something we wanted to check.\nWe took all of BFG’s source code and organized it to be more fully reproducible. After our previous blog post, set.seed calls were added to their source code, so we use those. We also organize the code into functions and sets of runs to save and process together. We think we interpreted their code correctly, but we can’t be sure. For ESS estimation, we used coda::effectiveSize, but Stan and mcmcse are examples of packages with other methods, and we aren’t sure what BFG used. They thin by 2 and give average results for beta[i]s. We want to compare to their results, so we take those steps too.\nHere are the results:\n\n\n\nBFG\nBetter code\nImprovement\n\n\n\n\n\nESS/Ns\nNit/t\nESS/t\nESS/Ns\n\n\n\nLM-C\nN=100, p=4 | 0.15 | 56122.45 | 3738.90 | 1.03 | 23060.80 | 10842.00 | 2.90\nN=1000, p=4 | 0.14 | 9401.71 | 609.97 | 1.00 | 2866.82 | 1303.10 | 2.14\nN=100, p=16 | 0.04 | 25345.62 | 428.45 | 0.95 | 5555.56 | 2396.00 | 5.59\nN=1000, p=16 | 0.03 | 3471.13 | 54.06 | 1.00 | 613.98 | 278.53 | 5.15\nN=2000, p=30 | 0.01 | 863.83 | 5.52 | 1.00 | 137.60 | 62.67 | 11.35\nN=30, p=50 | 0.00 | 11470.28 | 24.49 | 0.07 | 3869.15 | 114.62 | 4.68\nLM-C Bin\nN=100, p=4 | 0.12 | 61452.51 | 3303.31 | 0.52 | 22916.67 | 5384.40 | 1.63\nN=1000, p=4 | 0.10 | 9945.75 | 441.07 | 0.47 | 2857.14 | 606.16 | 1.37\nN=100, p=16 | 0.04 | 26699.03 | 430.92 | 0.49 | 5530.42 | 1223.25 | 2.84\nN=1000, p=16 | 0.03 | 3505.42 | 41.68 | 0.55 | 655.46 | 163.59 | 3.92\nN=30, p=50 | 0.01 | 11815.25 | 44.01 | 0.12 | 3941.24 | 211.66 | 4.81\nLM-WI\nN=100, p=4 | 0.38 | 44117.65 | 5595.82 | 0.99 | 22865.85 | 7545.97 | 1.35\nN=1000, p=4 | 0.44 | 4874.88 | 709.03 | 0.98 | 2834.47 | 929.87 | 1.31\nN=100, p=16 | 0.32 | 11441.65 | 1233.59 | 0.94 | 5845.67 | 1837.45 | 1.49\nN=1000, p=16 | 0.42 | 1269.14 | 179.09 | 1.00 | 653.62 | 217.22 | 1.21\nLM-NI\nN=100, p=4 | 0.37 | 43604.65 | 5415.31 | 1.01 | 22935.78 | 7749.15 | 1.43\nN=1000, p=4 | 0.43 | 5613.77 | 804.61 | 1.06 | 2751.28 | 974.50 | 1.21\nN=100, p=16 | 0.31 | 12386.46 | 1298.40 | 0.94 | 6134.97 | 1932.29 | 1.49\nN=1000, p=16 | 0.43 | 1271.83 | 182.56 | 1.02 | 625.94 | 212.29 | 1.16\nN=30, p=50 | 0.01 | 8581.24 | 14.45 | 0.01 | 3755.63 | 13.80 | 0.96\nLM-Lasso\nN=100, p=16, z=0 | 0.33 | 10881.39 | 905.68 | 0.33 | 17730.50 | 1475.74 | 1.63\nN=1000, p=16, z=0 | 0.44 | 1219.59 | 132.65 | 0.44 | 2129.02 | 231.57 | 1.75\nN=1000, p=30, z=2 | 0.41 | 552.30 | 56.81 | 0.41 | 942.42 | 96.94 | 1.71\nN=1000, p=30, z=15 | 0.42 | 540.51 | 56.91 | 0.42 | 941.97 | 99.17 | 1.74\nN=1000, p=30, z=28 | 0.42 | 541.01 | 56.27 | 0.42 | 970.73 | 100.97 | 1.79\nN=1000, p=100, z=2 | 0.36 | 77.75 | 7.06 | 0.36 | 141.22 | 12.83 | 1.82\nN=1000, p=100, z=50 | 0.37 | 74.89 | 6.89 | 0.37 | 141.32 | 13.01 | 1.89\nN=1000, p=100, z=98 | 0.39 | 74.78 | 7.37 | 0.39 | 142.60 | 14.05 | 1.91\nThe “BFG” columns gives results from the same way BFG ran the cases, we think. The “ESS/Ns” is the same as their \\(varepsilon_{\beta}\\). ESS is averaged for the beta parameters. Ns is the number of saved samples, after burn-in and thinning. Their code gives different choices of burn-in and saved iterations for the different cases, and we used their settings. The “Nit/t” is the total number of iterations (including burn-in) divided by total computation time. The final column, which BFG don’t give, is “ESS/t”, what we call MCMC efficiency. Choice of time in the denominator includes burn-in time (the same as for “Nit/t”).\nThe “Better code” columns give results when we write the code with matrix multiplication and, for “LM-C” and “LM-C Bin”, univariate priors. It is almost as efficient to write the code using an inner product for each mu[i] instead of matrix multiplication for all mu[i] together. Matrix multiplication makes sense when all of the inputs that might changes (in this case, beta[i]s updated by MCMC) require all of the same likelihood contributions to be calculated from the result (in this case, all y[i]s from all mu[i]s). Either way of coding the model makes it easier for NIMBLE to sample the beta[i]s with conjugate samplers and avoids the inefficiency of putting every scalar step into the model code.\nThe “Better by” column gives the ratio of “ESS/t” for the “Better code” to “ESS/t” for the BFG code. This is the factor by which the “Better code” version improves upon the “BFG” version.\nWe can see that writing better code often give improvements of say 1.2-3.0 fold, and sometimes of 5-10+ fold in ESS/time. These improvements — which came from writing the model in NIMBLE more similarly to how it was written in Stan — often put NIMBLE closer to or faster than Stan in various cases, and sometimes faster than JAGS with BFG’s version of the model. We’re sticking to NIMBLE, so we haven’t run JAGS with the better-written code to see how much it improves. Stan still shines for p&gt;n, and JAGS is still really good at linear models. The results show that, for the first four categories (above the LM-Lasso results), NIMBLE also can achieve very good mixing (near 100% ESS/saved samples), with the exception of the p&gt;n cases. BFG’s results showed worse mixing for NIMBLE in those cases.\nWe can also see that BFG’s computation-time results for “LM-WI” (which we noted above) do appear to be really weird. In our results, that case ran somewhat slower than the LM-C cases with matching N and p, but not around 40-times slower as reported by BFG. We won’t make detailed comparisons of LM-WI cases because we’re not confident BFG’s results are solid for these.\nAs a example, take LM-C, with the simplest being “N=100, p=4” and the hardest being “N=2000, p=30”, not counting the p&gt;n case. For the simplest case, BFG report that JAGS is about 2.1 times more efficient than Stan and about 2.4 times more efficient than NIMBLE. (E.g., the 2.1 comes from (100 * 3667)/(96 * 1883), reading numbers from their Table 2.) By writing the model in the simpler, better way in NIMBLE, we see a 2.9 fold gain in efficiency. This would make NIMBLE more efficient than Stan. We did not also re-run JAGS with the better code. For the hardest case, BFG report JAGS being about 1.8 times more efficient than Stan and about 2.1 times more efficient than NIMBLE. In that case coding the model better makes NIMBLE 11.4 times more efficient, apparently more efficient than Stan and possibly than JAGS. Again, we did not run JAGS with and without the coding improvement. As a final example, in one of the middle LM-L cases, with N = 1000, p = 30, and 15 of those truly 0, Stan is reported by BFG to be about 3.6 times more efficient than NIMBLE. The better-coded model improves NIMBLE by about 1.7-fold, leaving it still behind Stan but only by about half as much.\nWe ran these comparisons on a MacBook Pro (2.4 GHz 8-Core Intel Core i9). It looks like this was roughly 5 times faster than the computer on which BFG ran.\nInspection of traceplots revealed that the traceplots for the variance in the 5th and 6th “LM-C” cases had not yet converged in the “BFG” version of the model. More burn-in iterations would be needed. This goes hand-in-hand with the recognition that NIMBLE benefits from good initial values. In a real analysis, if a long burn-in was observed, a practical step would be to provide better initial values for the next run. Applied analysis always involves multiple MCMC runs as one gets things working and checked. With the “better code” version, the chains do appear to have converged.\nAt this point we should highlight that there isn’t only one version of NIMBLE’s MCMC performance. NIMBLE’s MCMC system is highly configurable, and its default samplers are just one possible choice among many. When putting real effort into boosting performance for hard models, we’ve seen improvements by 1-3 orders of magnitude (here, here and here). In non-conjugate cases where JAGS performs well, it is worth noting that JAGS uses a lot of slice samplers, and those can also be configured in NIMBLE. (But the cases here use lots of conjugate samplers, rather than slice samplers.)\nThe takeaway is that we don’t know why BFG gave Stan the benefit of matrix multiplication but didn’t do so for JAGS or NIMBLE, and doing so makes a substantial difference for NIMBLE. Also, we see more conjugacy cases to catch in our symbolic processing of model relationships.\nKeep everything organized in Ledger Live for Mac by tagging and taking notes so you can easily take note of your transactions and later refer to them."
  },
  {
    "objectID": "blog/version-0-12-1-of-nimble-released.html",
    "href": "blog/version-0-12-1-of-nimble-released.html",
    "title": "Version 0.12.1 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC and SMC).\nVersion 0.12.1, in combination with version 0.12.0 (which was released just last week), provides a variety of new functionality (in particular enhanced WAIC functionality and adding the LKJ distribution) plus bug fixes affecting MCMC in specific narrow cases described below and that warrant upgrading for some users. The changes include:\n\nCompletely revamping WAIC in NIMBLE, creating an online version that does not require any particular variable monitors. The new WAIC can calculate conditional or marginal WAIC and can group data nodes into joint likelihood terms if desired. In addition there is a new calculateWAIC() function that will calculate the basic conditional WAIC from MCMC output without having to enable the WAIC when creating the MCMC.\nAdding the LKJ distribution, useful for prior distributions for correlation matrices, along with random walk samplers for them. These samplers operate in an unconstrained transformed parameter space and are assigned by default during MCMC configuration.\nFixing a bug introduced in conjugacy processing in version 0.11.0 that causes incorrect MCMC sampling only in specific cases. The impacted cases have terms of the form “a[i] + x[i] * beta” (or more simply “x[i] * beta”), with beta subject to conjugate sampling and either (i) ‘x’ provided via NIMBLE’s constants argument and x[1] == 1 or (ii) ‘a’ provided via NIMBLE’s constants argument and a[1] == 0.\nFixing an error in the sampler for the proper CAR distribution (dcar_proper) that gives incorrect MCMC results when the mean of the proper CAR is not the same value for all locations, e.g., when embedding covariate effects directly in the mu parameter of the dcar_proper distribution.\nFixing isData(‘y’) to return TRUE whenever any elements of a multivariate data node (‘y’) are flagged as data. As a result, attempting to carry out MCMC on the non-data elements will now fail. Formerly if only some elements were flagged as data, isData would only check the first element, potentially leading to other elements that were flagged as data being overwritten.\nError trapping cases where a BNP model has a differing number of dependent stochastic nodes (e.g., observations) or dependent deterministic nodes per group of elements clustered jointly (using functionality introduced in version 0.10.0). Previously we were not error trapping this, and incorrect MCMC results would be obtained.\nImproving the formatting of standard logging messages."
  },
  {
    "objectID": "blog/version-1-3-0-of-nimble-released.html",
    "href": "blog/version-1-3-0-of-nimble-released.html",
    "title": "Version 1.3.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC, Laplace approximation, and SMC).\nVersion 1.3.0 provides some new and improved functionality, plus some bug fixes and improved error trapping.\nThe new and improved functionality includes:\n\nA new multivariate sampler, the Barker proposal sampler (sampler_barker). We encourage users to try this sampler in place of the block Metropolis RW_block sampler and let us know how well it works. The Barker sampler uses gradient information and may improve adaptation behavior, including\nbetter mixing when parameters are on different scales or the initialproposal scale is too large.\nAn improved Laplace/AGHQ implementation that includes use of the nlminb optimizer for both inner and outer optimization (for better optimization performance), improved messaging and output naming, returning the log-likelihood and degrees of freedom for model selection calculations, and unified control of optimization method and other controls at either the build stage or through the updateSettings method.\nThe addition of the BOBYQA optimization method through nimOptim, registered via nimOptimMethod.\n\nIn addition to the new and improved functionality above, other bug fixes, improved error trapping, and enhancements include:\n\nPreventing the use of nimbleFunction method names and nimbleFunction names that conflict with names in the nimble language (DSL).\nMore carefully checking for and warning of cases of NaN and non-finite log probability values in various samplers that in some cases may indicate invalid MCMC sampling.\nMore carefully handling of NaN and non-finite log probability values in the CRP sampler.\nError trapping cases of dynamic indices producing a non-scalar result in AD-enabled models and provide a suggested work-around.\nError trapping use of a non-existent nimbleList.\nPreventing use of a single seed when running multiple chains via runMCMC.\nImproving messaging related to lack of derivative support for functions.\nAdding information about model macros to the manual.\nFixing bug in caching values in the CRP sampler when maximum number of clusters is exceeded, which would have caused incorrect sampling (albeit with the user having been warned that they should increase the maximum number of clusters).\nFixing an issue preventing use of nimbleList elements in nimCat.\nPreventing an adaptation interval of one for various block samplers for which an interval of one leads to an error.\nAllowing runLaplace to use an uncompiled Laplace object.\n\nPlease see the release notes on our website for more details.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Version 1.3.0 of NIMBLE released"
    ]
  },
  {
    "objectID": "blog/version-1-1-0-of-nimble-released.html",
    "href": "blog/version-1-1-0-of-nimble-released.html",
    "title": "Version 1.1.0 of NIMBLE released",
    "section": "",
    "text": "We’ve released the newest version of NIMBLE on CRAN and on our website. NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods (such as MCMC,Laplace approximation, and SMC).\nThis release provides new functionality as well as various bug fixes and improved error trapping, including:\n\nImproving our automatic differentiation (AD) system so it can be used in a wider range of models, including models with stochastic indexing, discrete latent states, and CAR distributions. Support for AD for these models means that HMC sampling and Laplace approximation can be used.\nAllowing distributions and functions (whether user-defined or built-in) that lack AD support (such as dinterval, dconstraint, and truncated distributions) to be used and compiled in AD-enabled models. The added flexibility increases the range of models in which one can use AD methods (HMC or Laplace) on some parts of a model and other samplers or methods on other parts.\nAdding nimIntegrate to the NIMBLE language, providing one-dimensional numerical integration via adaptive quadrature, equivalent to R’s integrate. This can, for example, be used in a user-defined function or distribution for use in model code, such as to implement certain point process or survival models that involve a one-dimensional integral.\nAdding a “prior samples” MCMC sampler, which uses an existing set of numerical samples to define the prior distribution of model node(s).\nBetter support of the dCRP distribution in non-standard model structures.\nAdding error trapping to prevent accidental use of C++ keywords as model variable names.\nRemoving the RW_multinomial MCMC sampler, which was found to generate incorrect posterior results (in cases when a latent state followed a multinomial distribution)\nFixing a bug in conjugacy checking in a case of subsets of multivariate nodes.\nFixing is.na and is.nan to operate in the expected vectorized fashion.\nImproving documentation of AD, nimbleHMC, and nimbleSMC in the manual.\nUpdating Eigen (the C++ linear algebra library used by nimble) to version 3.4.0.\n\nPlease see the release notes on our website for more details.",
    "crumbs": [
      "Home",
      "Blog Posts",
      "Version 1.1.0 of NIMBLE released"
    ]
  },
  {
    "objectID": "recent-posts.html",
    "href": "recent-posts.html",
    "title": "Recent Posts",
    "section": "",
    "text": "Stay up to date with the latest NIMBLE developments, releases, and community news.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nannouncing the nimbleMacros package and the use of macros in NIMBLE models\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 19, 2025\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.3.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 21, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.2.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJul 31, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.2.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJun 14, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.1.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nnimbleHMC version 0.2.0 released, providing improved HMC performance\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nSep 20, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.1 of NIMBLE released, fixing a bug in version 1.0.0 affecting certain models\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 1.0.0 of NIMBLE released, providing automatic differentiation, Laplace approximation, and HMC sampling\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nMay 31, 2023\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.13.1 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 19, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nBug in newly-released version 0.13.0 affecting MCMC for models with predictive nodes\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nDec 8, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.13.0 of NIMBLE released\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nNov 29, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nWe’re looking for a programmer\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE virtual short course, January 4-6, 2023\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nSep 8, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nBeta version of NIMBLE with automatic differentiation, including HMC sampling and Laplace approximation\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nJul 15, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.12.2 of NIMBLE released, including an important bug fix for some models using Bayesian nonparametrics with the dCRP distribution\n\n\n\nrelease\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 4, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE in-person short course, June 1-3, Lisbon, Portugal\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nMar 2, 2022\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nA close look at some linear model MCMC comparisons\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\nNov 11, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\n\n\n\n\n\n\n\nNIMBLE online tutorial, November 18, 2021\n\n\n\neducation\n\nannouncement\n\n\n\n\n\n\n\n\n\nOct 20, 2021\n\n\nNIMBLE Development Team\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "NIMBLE provides a rich collection of examples to help you get started with statistical modeling and algorithm development. Examples cover a wide range of topics from basic BUGS model usage to advanced algorithm implementation.\n\n\n\n\n\n\nBuilding a model from BUGS code\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nConverting to NIMBLE\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nCreating a default MCMC\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nCustomizing an MCMC\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nParallelizing NIMBLE\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nSimulating from a model (quickly!)\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nUsing linear predictors in a regression model\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nBuilding a generalized linear mixed model and an MCMC for it\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nVariable selection using reversible jump MCMC (RJMCMC)\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nRestarting an MCMC\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nPosterior predictive sampling and other post-MCMC use of samples\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nEcology examples from the book Applied Hierarchical Modeling in Ecology\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nWriting a new distribution for use in BUGS code: zero-inflated Poisson\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nGaussian process models\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nConditional autoregressive (CAR) models\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nItem response theory (IRT) models\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nMaximum likelihood via Monte Carlo Expectation-Maximization (MCEM)\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nMaximum likelihood (basic example)\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nStochastic volatility modeling using a custom distribution\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nBayesian nonparametric density estimation\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nBayesian nonparametric random effects\n\n\n\n\n\nRead this example on a new page.\n\n\n\n\n\n\n\n\n\n\n\nBayesian nonparametrics with jointly clustered observations\n\n\n\n\n\nRead this example on a new page."
  },
  {
    "objectID": "license-and-citation.html",
    "href": "license-and-citation.html",
    "title": "License and Citation",
    "section": "",
    "text": "License\nNIMBLE is largely licensed under the BSD 3-Clause license, but our C++ code is licensed under the GPL (&gt;=2) and the package includes external contributions with their own licensing. Please see the COPYRIGHTS file in the package.\n\n\nCiting NIMBLE\nPlease cite the Journal of Computational and Graphical Statistics article in published work that uses or mentions NIMBLE. In work that also uses NIMBLE, please also cite the R package for the specific version. To help us track usage to justify funding support for NIMBLE, please include the DOI in the citation. Please cite the manual for specific material from the manual.\nHow to cite NIMBLE in general:\n@article{nimble-article:2017, \n  author = {{de Valpine}, P. and Turek, D. and Paciorek, C.J. and Anderson-Bergman, C. and {Temple Lang}, D. and Bodik, R.} \n  title = {Programming with models: writing statistical algorithms for general model structures with {NIMBLE}},\n  year = {2017}, \n  journal = {Journal of Computational and Graphical Statistics},\n  volume = 26,\n  pages = {403-417},\n  doi = {10.1080/10618600.2016.1172487}\n}\nHow to cite the package:\nNIMBLE Development Team. 2024. NIMBLE: MCMC, Particle Filtering, and Programmable Hierarchical Modeling. doi: 10.5281/zenodo.1211190. R package version 1.3.0, https://cran.r-project.org/package=nimble.\n@misc{nimble-software:2024,\n  author = {{de Valpine}, P. and Paciorek, C. and Turek, D. and Michaud, N. and Anderson-Bergman, C. and Obermeyer, F. and Wehrhahn Cortes, C. and Rodr{\\'i}guez, A. and {Temple Lang}, D. and Zhang, W. and Paganin, S. and Hug, J. and van Dam-Bates, P.}, \n  year = {2024},\n  title = {NIMBLE: MCMC, Particle Filtering, and Programmable Hierarchical Modeling}\n  version = 1.3.0,\n  doi = {10.5281/zenodo.1211190},\n  url = {https://cran.r-project.org/package=nimble}\n}\nHow to cite the manual:\nNIMBLE Development Team. 2024. NIMBLE User Manual. doi: 10.5281/zenodo.1211190. R package manual version 1.3.0. https://r-nimble.org.\n@manual{nimble-manual:2024,\n  author = {{de Valpine}, P. and Paciorek, C. and Turek, D. and Michaud, N. and Anderson-Bergman, C. and Obermeyer, F. and Wehrhahn Cortes, C. and Rodr{\\'i}guez, A. and {Temple Lang}, D. and Zhang, W. and Paganin, S. and Hug, J. and van Dam-Bates, P.}, \n  year = {2024}, \n  title = {NIMBLE User Manual}, \n  version = 1.3.0, \n  doi = {10.5281/zenodo.1211190}, \n  url = {https://r-nimble.org} \n}"
  },
  {
    "objectID": "CONVERSION_NOTES.html",
    "href": "CONVERSION_NOTES.html",
    "title": "WordPress to Quarto Conversion - NIMBLE Website",
    "section": "",
    "text": "Successfully converted the NIMBLE WordPress website to a Quarto website format. The conversion includes:\n\n\n\nMain Site Structure\n\nHomepage (index.qmd) with all key features\nNavigation structure in _quarto.yml\nCustom styling (styles.css, custom.scss)\n\nCore Pages Converted\n\nAbout Us (with team member photos)\nWhat is NIMBLE?\nDownload/Installation instructions\nDocumentation links\nExamples page\nContributing guidelines\nLicense and Citation\nGroups and Issues\nRelease Notes\nRecent Posts listing\n\nBlog System\n\nBlog index with listing functionality\nSample blog posts converted\nCategory system implemented\nRSS-ready structure\n\nAssets\n\nLogo and team member images\nEssential graphics (BUGS diagrams, flow charts)\nNIMBLE cheat sheet PDF\n\nConversion Tools\n\nPython script for HTML to Markdown conversion\nBash script for batch processing\nDocumentation for future conversions\n\n\n\n\n\n\nResponsive Design: Mobile-friendly navigation and layout\nSearch: Built-in site search functionality\nRSS: Automatic RSS feed generation\nCategories: Blog post categorization system\nSocial Links: GitHub and Twitter integration\nModern UI: Clean, professional appearance\n\n\n\n\nwebsite/\n├── _quarto.yml           # Main configuration\n├── index.qmd            # Homepage\n├── about-us.qmd         # Team information\n├── what-is-nimble.qmd   # Introduction\n├── download.qmd         # Installation\n├── documentation.qmd    # Docs links\n├── examples.qmd         # Code examples\n├── contributing.qmd     # How to contribute\n├── license-and-citation.qmd\n├── groups-and-issues.qmd\n├── release-notes.qmd\n├── recent-posts.qmd\n├── archived-versions-of-nimble-and-the-user-manual.qmd\n├── styles.css           # Custom CSS\n├── custom.scss          # SCSS variables\n├── blog/               # Blog posts\n│   ├── index.qmd       # Blog listing\n│   ├── version-1-3-0-of-nimble-released.qmd\n│   ├── version-1-2-1-of-nimble-released.qmd\n│   ├── version-1-2-0-of-nimble-released.qmd\n│   └── announcing-the-nimblemacros-package.qmd\n├── images/             # Static assets\n│   ├── nimble-logo-oval-small.png\n│   ├── team member photos...\n│   ├── BUGSfig.png\n│   ├── mixingExample.png\n│   ├── compileFlowChart.png\n│   └── NimbleCheatSheet.pdf\n├── convert_post.py     # HTML to Markdown converter\n├── convert_posts.sh    # Batch conversion script\n└── README.md           # Documentation\n\n\n\n\nConvert Remaining Blog Posts\n# Use the provided script\n./convert_posts.sh\nReview and Clean Up\n\nEdit converted blog posts for formatting\nUpdate dates and categories\nFix any broken links or images\n\nAdditional Content\n\nConvert WordPress pages not yet included\nAdd any missing documentation\nUpdate external links\n\nDeployment\n\nSet up hosting (Netlify, GitHub Pages, etc.)\nConfigure domain name\nSet up continuous deployment\n\n\n\n\n\n\nAdding New Posts: Create .qmd files in blog/ directory\nUpdating Pages: Edit corresponding .qmd files\nStyling Changes: Modify styles.css or custom.scss\nNavigation: Update _quarto.yml\n\n\n\n\n\nVersion Control: Full Git integration\nMaintainability: Markdown-based content\nPerformance: Static site generation\nModern Features: Built-in search, RSS, responsive design\nExtensibility: Easy to add new features\nSecurity: No database or dynamic components\n\nThe conversion preserves all essential content and functionality while providing a modern, maintainable foundation for the NIMBLE website."
  },
  {
    "objectID": "CONVERSION_NOTES.html#conversion-summary",
    "href": "CONVERSION_NOTES.html#conversion-summary",
    "title": "WordPress to Quarto Conversion - NIMBLE Website",
    "section": "",
    "text": "Successfully converted the NIMBLE WordPress website to a Quarto website format. The conversion includes:\n\n\n\nMain Site Structure\n\nHomepage (index.qmd) with all key features\nNavigation structure in _quarto.yml\nCustom styling (styles.css, custom.scss)\n\nCore Pages Converted\n\nAbout Us (with team member photos)\nWhat is NIMBLE?\nDownload/Installation instructions\nDocumentation links\nExamples page\nContributing guidelines\nLicense and Citation\nGroups and Issues\nRelease Notes\nRecent Posts listing\n\nBlog System\n\nBlog index with listing functionality\nSample blog posts converted\nCategory system implemented\nRSS-ready structure\n\nAssets\n\nLogo and team member images\nEssential graphics (BUGS diagrams, flow charts)\nNIMBLE cheat sheet PDF\n\nConversion Tools\n\nPython script for HTML to Markdown conversion\nBash script for batch processing\nDocumentation for future conversions\n\n\n\n\n\n\nResponsive Design: Mobile-friendly navigation and layout\nSearch: Built-in site search functionality\nRSS: Automatic RSS feed generation\nCategories: Blog post categorization system\nSocial Links: GitHub and Twitter integration\nModern UI: Clean, professional appearance\n\n\n\n\nwebsite/\n├── _quarto.yml           # Main configuration\n├── index.qmd            # Homepage\n├── about-us.qmd         # Team information\n├── what-is-nimble.qmd   # Introduction\n├── download.qmd         # Installation\n├── documentation.qmd    # Docs links\n├── examples.qmd         # Code examples\n├── contributing.qmd     # How to contribute\n├── license-and-citation.qmd\n├── groups-and-issues.qmd\n├── release-notes.qmd\n├── recent-posts.qmd\n├── archived-versions-of-nimble-and-the-user-manual.qmd\n├── styles.css           # Custom CSS\n├── custom.scss          # SCSS variables\n├── blog/               # Blog posts\n│   ├── index.qmd       # Blog listing\n│   ├── version-1-3-0-of-nimble-released.qmd\n│   ├── version-1-2-1-of-nimble-released.qmd\n│   ├── version-1-2-0-of-nimble-released.qmd\n│   └── announcing-the-nimblemacros-package.qmd\n├── images/             # Static assets\n│   ├── nimble-logo-oval-small.png\n│   ├── team member photos...\n│   ├── BUGSfig.png\n│   ├── mixingExample.png\n│   ├── compileFlowChart.png\n│   └── NimbleCheatSheet.pdf\n├── convert_post.py     # HTML to Markdown converter\n├── convert_posts.sh    # Batch conversion script\n└── README.md           # Documentation\n\n\n\n\nConvert Remaining Blog Posts\n# Use the provided script\n./convert_posts.sh\nReview and Clean Up\n\nEdit converted blog posts for formatting\nUpdate dates and categories\nFix any broken links or images\n\nAdditional Content\n\nConvert WordPress pages not yet included\nAdd any missing documentation\nUpdate external links\n\nDeployment\n\nSet up hosting (Netlify, GitHub Pages, etc.)\nConfigure domain name\nSet up continuous deployment\n\n\n\n\n\n\nAdding New Posts: Create .qmd files in blog/ directory\nUpdating Pages: Edit corresponding .qmd files\nStyling Changes: Modify styles.css or custom.scss\nNavigation: Update _quarto.yml\n\n\n\n\n\nVersion Control: Full Git integration\nMaintainability: Markdown-based content\nPerformance: Static site generation\nModern Features: Built-in search, RSS, responsive design\nExtensibility: Easy to add new features\nSecurity: No database or dynamic components\n\nThe conversion preserves all essential content and functionality while providing a modern, maintainable foundation for the NIMBLE website."
  },
  {
    "objectID": "about-us.html",
    "href": "about-us.html",
    "title": "About Us",
    "section": "",
    "text": "Perry de Valpine is in the Department of Environmental Science, Policy and Management at the University of California, Berkeley.\n\n\n\nChris Paciorek is an adjunct professor in the Department of Statistics at UC Berkeley, as well as the department’s statistical computing consultant.\n\n\n\nDaniel Turek is in the Department of Mathematics at Lafayette College.\n\n\n\nDuncan Temple Lang is in the Department of Statistics at the University of California, Davis."
  },
  {
    "objectID": "about-us.html#core-team",
    "href": "about-us.html#core-team",
    "title": "About Us",
    "section": "",
    "text": "Perry de Valpine is in the Department of Environmental Science, Policy and Management at the University of California, Berkeley.\n\n\n\nChris Paciorek is an adjunct professor in the Department of Statistics at UC Berkeley, as well as the department’s statistical computing consultant.\n\n\n\nDaniel Turek is in the Department of Mathematics at Lafayette College.\n\n\n\nDuncan Temple Lang is in the Department of Statistics at the University of California, Davis."
  },
  {
    "objectID": "what-is-nimble.html",
    "href": "what-is-nimble.html",
    "title": "What is NIMBLE?",
    "section": "",
    "text": "NIMBLE is a system for building and sharing analysis methods for statistical models, especially for hierarchical models and computationally-intensive methods. NIMBLE is built in R but compiles your models and algorithms using C++ for speed. It includes three components:\nNIMBLE can also be used without models as a way to compile simple R-like code into C++, which is then compiled and loaded into R with an interface function or object."
  },
  {
    "objectID": "what-is-nimble.html#funding",
    "href": "what-is-nimble.html#funding",
    "title": "What is NIMBLE?",
    "section": "Funding",
    "text": "Funding\nThe development of NIMBLE has been funded by:\n\nan NSF Advances in Biological Informatics grant (DBI-1147230) to P. de Valpine, C. Paciorek, and D. Temple Lang;\nan NSF SI2-SSI grant (ACI-1550488) to P. de Valpine, C. Paciorek, and D. Temple Lang; and\nan NSF Collaborative Research grant (DMS-1622444) to P. de Valpine, A. Rodriguez, and C. Paciorek.\nan NSF Collaborative Research grant (DMS-2152860) to P. de Valpine, C. Paciorek, and D. Turek.\n\nwith additional support provided by postdoctoral funding for D. Turek from the Berkeley Institute for Data Science and Google Summer of Code fellowships for N. Michaud (2015) and C. Lewis-Beck (2017)."
  }
]